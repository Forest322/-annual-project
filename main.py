from telebot import TeleBot, types
import sqlite3
import random
import time

bot = TeleBot("7505424553:AAH-gnl9ZaxiISnOE2OukqAKePcWWy4GZL8")
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    name TEXT,
    race TEXT,
    class TEXT,
    strength INTEGER DEFAULT 5,
    agility INTEGER DEFAULT 5,
    intellect INTEGER DEFAULT 5,
    stamina INTEGER DEFAULT 5,
    luck INTEGER DEFAULT 5,
    abilities TEXT DEFAULT '',
    level INTEGER DEFAULT 1,
    exp INTEGER DEFAULT 0,
    exp_to_next_level INTEGER DEFAULT 500,
    gold INTEGER DEFAULT 100
)""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS inventory (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    item_name TEXT,
    item_type TEXT,
    effect TEXT,
    quantity INTEGER DEFAULT 1,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)""")
conn.commit()

state = {}
BATTLE_STATES = {}

cursor.execute("""
CREATE TABLE IF NOT EXISTS deaths (
    user_id INTEGER PRIMARY KEY,
    death_time INTEGER
)""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS loot (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    item_name TEXT,
    min_level INTEGER,
    chance REAL
)""")


loot_items = [
    ("–ó–æ–ª–æ—Ç–∞—è –º–æ–Ω–µ—Ç–∞", 1, 0.7),
    ("–†–µ–¥–∫–∏–π –º–µ—á", 3, 0.3),
    ("–©–∏—Ç –≥–µ—Ä–æ—è", 5, 0.2),
    ("–ö–æ–ª—å—Ü–æ —É–¥–∞—á–∏", 2, 0.4),
    ("–ó–µ–ª—å–µ —É–¥–∞—á–∏", 1, 0.45),  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    ("–≠–ª–∏–∫—Å–∏—Ä –∑–¥–æ—Ä–æ–≤—å—è", 1, 0.5)
]
for item in loot_items:
    cursor.execute("INSERT OR IGNORE INTO loot (item_name, min_level, chance) VALUES (?, ?, ?)", item)
conn.commit()

def get_enemy(level):
    base_hp = 50 + (level-1)*20
    base_attack = 10 + (level-1)*3
    enemies = [
        {"name": "–ì–æ–±–ª–∏–Ω", "hp": base_hp, "attack": base_attack},
        {"name": "–¢—Ä–æ–ª–ª—å", "hp": base_hp*1.5, "attack": base_attack*1.2},
        {"name": "–î—Ä–∞–∫–æ–Ω", "hp": base_hp*3, "attack": base_attack*2}
    ]
    return random.choice(enemies[:min(level//3 + 1, 3)])

def calculate_escape_chance(user_id):
    cursor.execute("SELECT * FROM inventory WHERE user_id = ? AND item_name = '–ó–µ–ª—å–µ —É–¥–∞—á–∏'", (user_id,))
    has_luck_potion = cursor.fetchone() is not None
    return 45 if has_luck_potion else 70

def get_revive_options(user_id):
    markup = types.InlineKeyboardMarkup()
    cursor.execute("SELECT death_time FROM deaths WHERE user_id = ?", (user_id,))
    death_time = cursor.fetchone()
    if death_time and (time.time() - death_time[0]) >= 300:  
        markup.add(types.InlineKeyboardButton("–í–æ–∑—Ä–æ–¥–∏—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="revive_free"))
    else:
        markup.add(types.InlineKeyboardButton("–ü–æ–¥–æ–∂–¥–∞—Ç—å 5 –º–∏–Ω—É—Ç", callback_data="revive_wait"))  
    
    markup.add(types.InlineKeyboardButton("–ü–æ—Å–ø–∞—Ç—å (-15% HP)", callback_data="revive_sleep"))  
    return markup


def give_loot(user_id, level):
    cursor.execute("SELECT * FROM loot WHERE min_level <= ?", (level,))
    possible_loot = cursor.fetchall()
    total_chance = sum(item[3] for item in possible_loot)
    rand = random.uniform(0, total_chance)
    current = 0
    for item in possible_loot:
        current += item[3]
        if rand <= current:
            cursor.execute("INSERT INTO inventory (user_id, item_name) VALUES (?, ?)", (user_id, item[1]))
            conn.commit()
            return item[1]
    return None

@bot.callback_query_handler(lambda call: call.data.startswith("battle_"))
def handle_battle_actions(call: types.CallbackQuery):
    user_id = call.from_user.id
    battle = BATTLE_STATES.get(user_id)
    if not battle:
        bot.answer_callback_query(call.id, "–ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return

    user = get_user(user_id)
    enemy = battle['enemy']
    
    if call.data == "battle_attack":
        
        player_damage = user[7] + random.randint(1, 5)
        battle['enemy_hp'] -= player_damage
        
        
        enemy_damage = enemy['attack'] + random.randint(1, 3) - user[10]//2
        battle['user_hp'] -= max(enemy_damage, 0)
        
        
        if battle['enemy_hp'] <= 0:
            exp_gain = random.choices(
            [50, 100, 150],
            weights=[50, 40, 10]
        )[0]
            # –ü–æ–±–µ–¥–∞
            exp_gain = enemy['attack'] * 10
            gold_gain = random.randint(10, 50)
            loot = give_loot(user_id, user[13])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç –∏ –∑–æ–ª–æ—Ç–æ
            cursor.execute("UPDATE users SET exp = exp + ?, gold = gold + ? WHERE user_id = ?",
                        (exp_gain, gold_gain, user_id))
            conn.commit()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            new_level = check_level_up(user_id)
            level_up_msg = f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {new_level}!" if new_level else ""
            
            msg = (f"üèÜ –ü–æ–±–µ–¥–∞!\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ: {exp_gain} –æ–ø—ã—Ç–∞ –∏ {gold_gain} –∑–æ–ª–æ—Ç–∞\n"
                f"–î–æ–±—ã—á–∞: {loot if loot else '–Ω–µ—Ç'}"
                f"{level_up_msg}")
            bot.edit_message_text(msg, call.message.chat.id, call.message.message_id)
            del BATTLE_STATES[user_id]
            return
            
        elif battle['user_hp'] <= 0:
            
            cursor.execute("INSERT OR REPLACE INTO deaths (user_id, death_time) VALUES (?, ?)",
                         (user_id, int(time.time())))
            conn.commit()
            
            markup = get_revive_options(user_id)
            bot.edit_message_text("‚ò†Ô∏è –í—ã –ø–∞–ª–∏ –≤ –±–æ—é!", call.message.chat.id, call.message.message_id, reply_markup=markup)
            del BATTLE_STATES[user_id]
            return
            
        show_battle_interface(call.message, user_id)
    
    elif call.data == "battle_flee":
        escape_chance = calculate_escape_chance(user_id)
        if random.randint(1, 100) <= escape_chance:
            bot.edit_message_text("üèÉ‚ôÇÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª–∏!", call.message.chat.id, call.message.message_id)
            del BATTLE_STATES[user_id]
        else:
            enemy_damage = enemy['attack'] + random.randint(1, 3)
            battle['user_hp'] -= enemy_damage
            bot.answer_callback_query(call.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å! –ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: {enemy_damage}")
            show_battle_interface(call.message, user_id)

@bot.callback_query_handler(lambda call: call.data.startswith("revive_"))
def handle_revive(call: types.CallbackQuery):
    user_id = call.from_user.id
    user = get_user(user_id)
    msg = "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    try:
        if call.data == "revive_sleep":
            cursor.execute("SELECT death_time FROM deaths WHERE user_id = ?", (user_id,))
            death_time = cursor.fetchone()[0]
            time_diff = time.time() - death_time
            
            if time_diff < 300:  # 5 –º–∏–Ω—É—Ç
                new_hp = int(user[10] * 0.85)
                cursor.execute("UPDATE users SET stamina = ? WHERE user_id = ?", (new_hp//10, user_id))
                msg = f"üí§ –í—ã –ø–æ—Å–ø–∞–ª–∏ –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ 15% HP! –¢–µ–∫—É—â–µ–µ HP: {new_hp}"
            else:
                msg = "üí§ –í—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É–ª–∏ –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏ HP!"
            
            cursor.execute("DELETE FROM deaths WHERE user_id = ?", (user_id,))
            conn.commit()

        elif call.data == "revive_potion":
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è –∑–µ–ª—å–µ–º
            cursor.execute("DELETE FROM deaths WHERE user_id = ?", (user_id,))
            cursor.execute("DELETE FROM inventory WHERE user_id = ? AND item_name = '–ó–µ–ª—å–µ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è'", (user_id,))
            conn.commit()
            msg = "‚öóÔ∏è –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∑–µ–ª—å–µ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è!"
            
        elif call.data == "revive_free":
            cursor.execute("DELETE FROM deaths WHERE user_id = ?", (user_id,))
            conn.commit()
            msg = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ!"
            
        elif call.data == "revive_wait":
            msg = "‚è≥ –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å 5 –º–∏–Ω—É—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è"
            
        bot.edit_message_text(msg, call.message.chat.id, call.message.message_id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_revive: {str(e)}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"),
               types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="–ú–∞–≥–∞–∑–∏–Ω"),
               types.InlineKeyboardButton("–ë–æ–π", callback_data="start_battle"))
    bot.send_message(call.message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)



def check_level_up(user_id):
    user = get_user(user_id)
    current_exp = user[14]
    exp_needed = user[15]
    
    if current_exp >= exp_needed:
        new_level = user[13] + 1
        new_exp = current_exp - exp_needed
        new_exp_needed = get_exp_to_next_level(new_level)
        
        # –ü–æ–≤—ã—à–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        update_query = """
            UPDATE users SET 
            level = ?,
            exp = ?,
            exp_to_next_level = ?,
            strength = strength + 1,
            agility = agility + 1,
            intellect = intellect + 1,
            stamina = stamina + 1 
            WHERE user_id = ?
        """
        cursor.execute(update_query, (new_level, new_exp, new_exp_needed, user_id))
        conn.commit()
        
        return new_level
    return None


def show_battle_interface(message, user_id):
    battle = BATTLE_STATES[user_id]
    enemy = battle["enemy"]
    user = get_user(user_id)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="battle_attack"),
               types.InlineKeyboardButton(f"–°–±–µ–∂–∞—Ç—å ({calculate_escape_chance(user_id)}%)", callback_data="battle_flee"))
    
    inventory = get_user_inventory(user_id)
    for item in inventory:
        if "–ó–µ–ª—å–µ" in item[2]:
            markup.add(types.InlineKeyboardButton(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {item[2]}", callback_data=f"use_{item[0]}"))
    
    msg_text = (f"‚öîÔ∏è –ë–æ–π —Å {enemy['name']} (–£—Ä. {user[13]})\n"
               f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {battle['user_hp']}\n"
               f"üíÄ –ó–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞: {battle['enemy_hp']}")
    bot.edit_message_text(msg_text, message.chat.id, message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "start_battle")
def start_battle(call: types.CallbackQuery):
    user = get_user(call.from_user.id)
    enemy = get_enemy(user[13])
    BATTLE_STATES[call.from_user.id] = {
        "enemy": enemy,
        "user_hp": user[10] * 10,
        "enemy_hp": enemy["hp"],
        "temp_buffs": {}
    }
    show_battle_interface(call.message, call.from_user.id)


def get_exp_to_next_level(current_level):
    return 500 * (2 ** (current_level // 5))

def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone()

def get_user_inventory(user_id):
    cursor.execute("SELECT * FROM inventory WHERE user_id = ?", (user_id,))
    return cursor.fetchall()

def progress_bar(current, total, length=10):
    percent = min(current / total, 1.0)
    return "üü©" * int(percent * length) + "‚¨ú" * (length - int(percent * length))

@bot.message_handler(commands=["start"])
def start(message: types.Message):
    user = get_user(message.from_user.id)
    
    if user:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="–ú–∞–≥–∞–∑–∏–Ω"),
                   types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"),
                   types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–∞—è", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
        
        welcome_msg = (f"‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user[4]}!</b> ‚ú®\n\n"
                      f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user[13]} ({user[14]}/{user[15]})\n"
                      f"üí∞ –ó–æ–ª–æ—Ç–æ: {user[16]}\n\n"
                      f"üß¨ –†–∞—Å–∞: {user[5]}\nüéØ –ö–ª–∞—Å—Å: {user[6]}\n\n"
                      f"üí™ –°–∏–ª–∞: {user[7]}\nüèπ –õ–æ–≤–∫–æ—Å—Ç—å: {user[8]}\n"
                      f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {user[9]}\nüõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user[10]}\n"
                      f"üçÄ –£–¥–∞—á–∞: {user[11]}\n\n‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {user[12]}")
        bot.send_message(message.chat.id, welcome_msg, parse_mode="HTML", reply_markup=markup)
    else:
        state[message.from_user.id] = {
            "name": None, "race": None, "class": None,
            "strength": 5, "agility": 5, "intellect": 5,
            "stamina": 5, "luck": 5, "abilities": [],
            "level": 1, "exp": 0, "exp_to_next_level": 500, "gold": 100
        }
        bot.send_message(message.chat.id, "üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", parse_mode="HTML")
        bot.register_next_step_handler(message, process_name_step)

def process_name_step(message: types.Message):
    state[message.from_user.id]["name"] = message.text
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ß–µ–ª–æ–≤–µ–∫", callback_data="race:–ß–µ–ª–æ–≤–µ–∫"),
               types.InlineKeyboardButton("–≠–ª—å—Ñ", callback_data="race:–≠–ª—å—Ñ"),
               types.InlineKeyboardButton("–û—Ä–∫", callback_data="race:–û—Ä–∫"),
               types.InlineKeyboardButton("–ì–Ω–æ–º", callback_data="race:–ì–Ω–æ–º"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É:", reply_markup=markup)

@bot.callback_query_handler(lambda call: call.data.startswith("race:"))
def process_race(call: types.CallbackQuery):
    race = call.data.split(":")[1]
    state[call.from_user.id]["race"] = race
    stats = state[call.from_user.id]
    
    race_bonuses = {
        "–ß–µ–ª–æ–≤–µ–∫": "–í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ +1",
        "–≠–ª—å—Ñ": "–õ–æ–≤–∫–æ—Å—Ç—å +2, –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +1",
        "–û—Ä–∫": "–°–∏–ª–∞ +2, –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å +1",
        "–ì–Ω–æ–º": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +2, –£–¥–∞—á–∞ +1"
    }
    
    bot.edit_message_text(
        f"üß¨ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—É: <b>{race}</b>\n"
        f"‚ú® –ë–æ–Ω—É—Å—ã: {race_bonuses[race]}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
        call.message.chat.id, 
        call.message.message_id,
        parse_mode="HTML"
    )
    
    markup = types.InlineKeyboardMarkup()
    classes = [
        ("–í–æ–∏–Ω", "üí™ –°–∏–ª–∞ +2, –£–¥–∞—Ä —â–∏—Ç–æ–º"),
        ("–õ—É—á–Ω–∏–∫", "üèπ –õ–æ–≤–∫–æ—Å—Ç—å +2, –ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª"),
        ("–ú–∞–≥", "üîÆ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +3, –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä"),
        ("–í–æ—Ä", "üé≤ –£–¥–∞—á–∞ +2, –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä")
    ]
    for class_name, bonus in classes:
        markup.add(types.InlineKeyboardButton(
            f"{class_name} - {bonus}", 
            callback_data=f"class:{class_name}"
        ))
        
    bot.send_message(call.message.chat.id, 
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:</b>\n\n"
        "1. –í–æ–∏–Ω - –°–∏–ª–∞ +2, –£–¥–∞—Ä —â–∏—Ç–æ–º\n"
        "2. –õ—É—á–Ω–∏–∫ - –õ–æ–≤–∫–æ—Å—Ç—å +2, –ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª\n"
        "3. –ú–∞–≥ - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +3, –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä\n"
        "4. –í–æ—Ä - –£–¥–∞—á–∞ +2, –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(lambda call: call.data.startswith("class:"))
def process_class(call: types.CallbackQuery):
    class_ = call.data.split(":")[1]
    state[call.from_user.id]["class"] = class_
    stats = state[call.from_user.id]
    
    class_bonuses = {
        "–í–æ–∏–Ω": {"strength": 2, "abilities": ["üõ° –£–¥–∞—Ä —â–∏—Ç–æ–º"]},
        "–õ—É—á–Ω–∏–∫": {"agility": 2, "abilities": ["üéØ –ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª"]},
        "–ú–∞–≥": {"intellect": 3, "abilities": ["üî• –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä"]},
        "–í–æ—Ä": {"luck": 2, "abilities": ["üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä"]}
    }
    
    bonuses = class_bonuses[class_]
    for stat, value in bonuses.items():
        if stat in stats:
            stats[stat] += value
        else:
            stats["abilities"] = value
    
    final_stats = (
        f"üß¨ –†–∞—Å–∞: {stats['race']}\n"
        f"üéØ –ö–ª–∞—Å—Å: {class_}\n\n"
        f"üí™ –°–∏–ª–∞: {stats['strength']}\n"
        f"üèπ –õ–æ–≤–∫–æ—Å—Ç—å: {stats['agility']}\n"
        f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {stats['intellect']}\n"
        f"üõ° –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {stats['stamina']}\n"
        f"üçÄ –£–¥–∞—á–∞: {stats['luck']}\n\n"
        f"‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {', '.join(stats['abilities'])}"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"))
    
    bot.edit_message_text(
        f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ –≥–æ—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n{final_stats}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode="HTML"
    )
    
    user_data = state[call.from_user.id]
    cursor.execute("""INSERT INTO users 
        (user_id, username, first_name, last_name, name, race, class, strength, agility, intellect, stamina, luck, abilities, gold) 
        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)""", 
        (
            call.from_user.id,
            call.from_user.username,
            call.from_user.first_name,
            call.from_user.last_name,
            user_data["name"],
            user_data["race"],
            class_,
            user_data["strength"],
            user_data["agility"],
            user_data["intellect"],
            user_data["stamina"],
            user_data["luck"],
            ", ".join(user_data["abilities"]),
            user_data["gold"]
        ))
    conn.commit()
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="–ú–∞–≥–∞–∑–∏–Ω"),
               types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"),
               types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–∞—è", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
    
    profile_msg = (f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!\n\nüìù –ò–º—è: {user_data['name']}\n"
                  f"üß¨ –†–∞—Å–∞: {user_data['race']}\nüéØ –ö–ª–∞—Å—Å: {class_}\n\n"
                  f"üí™ –°–∏–ª–∞: {user_data['strength']}\nüèπ –õ–æ–≤–∫–æ—Å—Ç—å: {user_data['agility']}\n"
                  f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {user_data['intellect']}\nüõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user_data['stamina']}\n"
                  f"üçÄ –£–¥–∞—á–∞: {user_data['luck']}\n\n‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {', '.join(user_data['abilities'])}")
    bot.edit_message_text(profile_msg, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call: types.CallbackQuery):
    user = get_user(call.from_user.id)
    if not user:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return

    if call.data == "–ì–ª–∞–≤–Ω–∞—è":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"),
                   types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="–ú–∞–≥–∞–∑–∏–Ω"),
                   types.InlineKeyboardButton("–ë–æ–π", callback_data="start_battle"))
        bot.edit_message_text(f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ü—Ä–∏–≤–µ—Ç, {user[4]}!", call.message.chat.id, call.message.message_id, reply_markup=markup)
    
    elif call.data == "–ü—Ä–æ—Ñ–∏–ª—å":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
                   types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
        
        profile_msg = (f"üìä –ü—Ä–æ—Ñ–∏–ª—å {user[4]}\n\n"
                      f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user[13]}\n"
                      f"üìà –û–ø—ã—Ç: {user[14]}/{user[15]}\n"
                      f"üí∞ –ó–æ–ª–æ—Ç–æ: {user[16]}\n\n"
                      f"üí™ –°–∏–ª–∞: {user[7]}\nüèπ –õ–æ–≤–∫–æ—Å—Ç—å: {user[8]}\n"
                      f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {user[9]}\nüõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user[10]}\n"
                      f"üçÄ –£–¥–∞—á–∞: {user[11]}\n\n"
                      f"{progress_bar(user[14], user[15])}")
        bot.edit_message_text(profile_msg, call.message.chat.id, call.message.message_id, reply_markup=markup)
    
    elif call.data == "–ú–∞–≥–∞–∑–∏–Ω":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ó–µ–ª—å–µ —Å–∏–ª—ã (50g)", callback_data="buy:strength_potion"),
                   types.InlineKeyboardButton("–ó–µ–ª—å–µ –ª–æ–≤–∫–æ—Å—Ç–∏ (50g)", callback_data="buy:agility_potion"),
                   types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
        bot.edit_message_text(f"üõí –ú–∞–≥–∞–∑–∏–Ω\nüí∞ –ó–æ–ª–æ—Ç–æ: {user[16]}", call.message.chat.id, call.message.message_id, reply_markup=markup)
    
    elif call.data.startswith("buy:"):
        item_type = call.data.split(":")[1]
        if user[16] < 50:
            bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")
            return
        
        item_name = "–ó–µ–ª—å–µ —Å–∏–ª—ã" if item_type == "strength_potion" else "–ó–µ–ª—å–µ –ª–æ–≤–∫–æ—Å—Ç–∏"
        effect = "+1 –∫ —Å–∏–ª–µ" if item_type == "strength_potion" else "+1 –∫ –ª–æ–≤–∫–æ—Å—Ç–∏"
        
        cursor.execute("UPDATE users SET gold = gold - 50 WHERE user_id = ?", (call.from_user.id,))
        cursor.execute("SELECT * FROM inventory WHERE user_id = ? AND item_name = ?", (call.from_user.id, item_name))
        if existing := cursor.fetchone():
            cursor.execute("UPDATE inventory SET quantity = quantity + 1 WHERE id = ?", (existing[0],))
        else:
            cursor.execute("INSERT INTO inventory (user_id, item_name, item_type, effect) VALUES (?,?,?,?)",
                         (call.from_user.id, item_name, item_type, effect))
        conn.commit()
        
        bot.answer_callback_query(call.id, f"–ö—É–ø–ª–µ–Ω–æ {item_name}!")
        handle_callbacks(call)
    
    elif call.data == "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
        inventory = get_user_inventory(call.from_user.id)
        markup = types.InlineKeyboardMarkup()
        for item in inventory:
            markup.add(types.InlineKeyboardButton(f"{item[2]} x{item[5]}", callback_data=f"item_{item[0]}"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"))
        bot.edit_message_text("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", call.message.chat.id, call.message.message_id, reply_markup=markup)
    
    elif call.data == "start_battle":
        enemy = random.choice([{"name": "–ì–æ–±–ª–∏–Ω", "hp": 50, "attack": 8}, 
                             {"name": "–¢—Ä–æ–ª–ª—å", "hp": 100, "attack": 15}])
        BATTLE_STATES[call.from_user.id] = {
            "enemy": enemy,
            "user_hp": user[10] * 10,
            "enemy_hp": enemy["hp"],
            "temp_buffs": {}
        }
        show_battle_interface(call.message, call.from_user.id)

def show_battle_interface(message, user_id):
    battle = BATTLE_STATES[user_id]
    enemy = battle["enemy"]
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="battle_attack"),
               types.InlineKeyboardButton("–°–±–µ–∂–∞—Ç—å", callback_data="battle_flee"))
    
    for item in get_user_inventory(user_id):
        if "–ó–µ–ª—å–µ" in item[2]:
            markup.add(types.InlineKeyboardButton(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {item[2]}", callback_data=f"use_{item[0]}"))
    
    msg_text = (f"‚öîÔ∏è –ë–æ–π —Å {enemy['name']}!\n"
               f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {battle['user_hp']}\n"
               f"üíÄ –ó–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞: {battle['enemy_hp']}")
    bot.edit_message_text(msg_text, message.chat.id, message.message_id, reply_markup=markup)

@bot.callback_query_handler(lambda call: call.data.startswith("use_"))
def use_item(call: types.CallbackQuery):
    item_id = int(call.data.split("_")[1])
    user_id = call.from_user.id
    inventory = get_user_inventory(user_id)
    item = next((i for i in inventory if i[0] == item_id), None)
    
    if not item:
        bot.answer_callback_query(call.id, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if "–ó–µ–ª—å–µ —Å–∏–ª—ã" in item[2]:
        BATTLE_STATES[user_id]["temp_buffs"]["strength"] = BATTLE_STATES[user_id].get("temp_buffs", {}).get("strength", 0) + 1
    elif "–ó–µ–ª—å–µ –ª–æ–≤–∫–æ—Å—Ç–∏" in item[2]:
        BATTLE_STATES[user_id]["temp_buffs"]["agility"] = BATTLE_STATES[user_id].get("temp_buffs", {}).get("agility", 0) + 1
    
    if item[5] > 1:
        cursor.execute("UPDATE inventory SET quantity = quantity - 1 WHERE id = ?", (item_id,))
    else:
        cursor.execute("DELETE FROM inventory WHERE id = ?", (item_id,))
    conn.commit()
    
    bot.answer_callback_query(call.id, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {item[2]}!")
    show_battle_interface(call.message, user_id)



if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)