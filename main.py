from telebot import TeleBot, types
import sqlite3
import random
import time

bot = TeleBot("7505424553:AAH-gnl9ZaxiISnOE2OukqAKePcWWy4GZL8")
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    name TEXT,
    race TEXT,
    class TEXT,
    strength INTEGER DEFAULT 5,
    agility INTEGER DEFAULT 5,
    intellect INTEGER DEFAULT 5,
    stamina INTEGER DEFAULT 5,
    luck INTEGER DEFAULT 5,
    abilities TEXT DEFAULT '',
    level INTEGER DEFAULT 1,
    exp INTEGER DEFAULT 0,
    exp_to_next_level INTEGER DEFAULT 500,
    gold INTEGER DEFAULT 100
)""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS inventory (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    item_name TEXT,
    item_type TEXT,
    effect TEXT,
    quantity INTEGER DEFAULT 1,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)""")
conn.commit()

state = {}
BATTLE_STATES = {}

cursor.execute("""
CREATE TABLE IF NOT EXISTS deaths (
    user_id INTEGER PRIMARY KEY,
    death_time INTEGER
)""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS loot (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    item_name TEXT,
    min_level INTEGER,
    chance REAL
)""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS guild_quests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    description TEXT,
    target TEXT,
    required_count INTEGER,
    reward_reputation INTEGER,
    reward_gold INTEGER,
    reward_exp INTEGER,
    required_level INTEGER
)""")
conn.commit()

cursor.execute("""
CREATE TABLE IF NOT EXISTS guild (
    user_id INTEGER PRIMARY KEY,
    reputation INTEGER DEFAULT 0,
    level INTEGER DEFAULT 1,
    current_quest INTEGER,
    quest_progress INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)""")


@bot.callback_query_handler(func=lambda call: call.data == "guild_quests")
def show_quests(call):
    user_id = call.from_user.id
    
    
    cursor.execute("INSERT OR IGNORE INTO guild (user_id) VALUES (?)", (user_id,))
    conn.commit()
    
    cursor.execute("SELECT level FROM guild WHERE user_id = ?", (user_id,))
    guild_level_row = cursor.fetchone()
    guild_level = guild_level_row[0] if guild_level_row else 1
    
    cursor.execute("SELECT * FROM guild_quests WHERE required_level <= ?", (guild_level,))
    quests = cursor.fetchall()
    
    quest_list = "\n".join([f"{idx}. {q[1]} (+{q[5]} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏)" for idx, q in enumerate(quests, 1)])
    
    msg = f"üìú *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*\n{quest_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:"
    
    markup = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton(str(i), callback_data=f"quest_{q[0]}") for i, q in enumerate(quests, 1)]
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ì–∏–ª—å–¥–∏—è"))
    
    bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, parse_mode="Markdown", reply_markup=markup)

try:
    cursor.execute("SELECT current_quest FROM guild LIMIT 1")
except sqlite3.OperationalError:
    
    cursor.execute("ALTER TABLE guild ADD COLUMN current_quest INTEGER")
    conn.commit()

@bot.callback_query_handler(func=lambda call: call.data == "–ì–∏–ª—å–¥–∏—è")
def guild_menu(call):
    user_id = call.from_user.id
    cursor.execute("SELECT reputation, level, current_quest, quest_progress FROM guild WHERE user_id = ?", (user_id,))
    guild_data = cursor.fetchone() or (0, 1, None, 0)
    
    msg = f"""üè∞ *–ì–∏–ª—å–¥–∏—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π*
    
üìä –í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {guild_data[0]}/150
‚≠ê –£—Ä–æ–≤–µ–Ω—å –≥–∏–ª—å–¥–∏–∏: {guild_data[1]}"""
    
    if guild_data[2]:
        cursor.execute("SELECT title, target, required_count FROM guild_quests WHERE id = ?", (guild_data[2],))
        quest = cursor.fetchone()
        msg += f"\n\nüìå –ê–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {quest[0]}\n‚û§ –ü—Ä–æ–≥—Ä–µ—Å—Å: {guild_data[3]}/{quest[2]} {quest[1]}"
    
    markup = types.InlineKeyboardMarkup()
    if guild_data[2]:
        markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ ‚ùå", callback_data="cancel_quest"))
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å üîÑ", callback_data="check_progress"))
    else:
        markup.add(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ üìú", callback_data="guild_quests"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
    
    bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "check_progress")
def check_progress(call):
    user_id = call.from_user.id
    cursor.execute("SELECT current_quest, quest_progress FROM guild WHERE user_id = ?", (user_id,))
    current_quest, progress = cursor.fetchone()
    
    if current_quest is None:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è!")
        return
    
    cursor.execute("SELECT title, required_count FROM guild_quests WHERE id = ?", (current_quest,))
    quest = cursor.fetchone()
    
    if quest is None:
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    msg = f"üìå –ê–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {quest[0]}\n‚û§ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{quest[1]}"
    bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "cancel_quest")
def cancel_quest(call):
    user_id = call.from_user.id
    cursor.execute("UPDATE guild SET current_quest = NULL, quest_progress = 0 WHERE user_id = ?", (user_id,))
    conn.commit()
    bot.answer_callback_query(call.id, "üóë –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
    guild_menu(call)

@bot.callback_query_handler(func=lambda call: call.data == "guild_quests")
def show_quests(call):
    user_id = call.from_user.id
    
    
    cursor.execute("INSERT OR IGNORE INTO guild (user_id) VALUES (?)", (user_id,))
    conn.commit()
    
    cursor.execute("SELECT level FROM guild WHERE user_id = ?", (user_id,))
    guild_level_row = cursor.fetchone()
    
    
    guild_level = guild_level_row[0] if guild_level_row else 1
    
    cursor.execute("SELECT * FROM guild_quests WHERE required_level <= ?", (guild_level,))
    quests = cursor.fetchall()
    
    quest_list = "\n".join([f"{idx}. {q[2]} (+{q[4]} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏)" for idx, q in enumerate(quests, 1)])
    
    msg = f"""üìú *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*
{quest_list}
    
–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:"""
    
    markup = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton(str(i), callback_data=f"quest_{q[0]}") for i, q in enumerate(quests, 1)]
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ì–∏–ª—å–¥–∏—è"))
    
    bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, 
                        parse_mode="Markdown", reply_markup=markup)


def check_quests(user_id, enemy_name):
    cursor.execute("SELECT completed_quests FROM guild WHERE user_id = ?", (user_id,))
    quests = cursor.fetchone()[0].split(",") if cursor.fetchone() else []
    
    for quest_id in quests:
        cursor.execute("SELECT * FROM guild_quests WHERE id = ?", (quest_id,))
        quest = cursor.fetchone()
        if "–≥–æ–±–ª–∏–Ω" in quest[3].lower() and "–≥–æ–±–ª–∏–Ω" in enemy_name.lower():
            cursor.execute("UPDATE guild SET reputation = reputation + ? WHERE user_id = ?", 
                           (quest[5], user_id))
            conn.commit()
            return f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {quest[2]}!"
    return ""
try:
    cursor.execute("ALTER TABLE guild ADD COLUMN completed_quests TEXT DEFAULT ''")
    conn.commit()
    print("–°—Ç–æ–ª–±–µ—Ü completed_quests —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
except sqlite3.OperationalError as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞: {e}")
def check_guild_level(user_id):
    cursor.execute("SELECT reputation, level FROM guild WHERE user_id = ?", (user_id,))
    rep, level = cursor.fetchone()
    
    required = 150 * level
    if rep >= required:
        new_level = level + 1
        cursor.execute("UPDATE guild SET level = ?, reputation = ? WHERE user_id = ?", 
                     (new_level, rep - required, user_id))
        conn.commit()
        return f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è –≥–∏–ª—å–¥–∏–∏!"
    return ""





@bot.callback_query_handler(lambda call: call.data.startswith("quest_"))
def show_quest_details(call):
    quest_id = int(call.data.split("_")[1])
    cursor.execute("SELECT * FROM guild_quests WHERE id = ?", (quest_id,))
    quest = cursor.fetchone()
    
    if quest is None:
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    
    if len(quest) < 8:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
        return
    
    msg = f"""üìñ *{quest[2]}*
üîπ *–û–ø–∏—Å–∞–Ω–∏–µ:* {quest[3]}
üîπ *–ù–∞–≥—Ä–∞–¥–∞:*
   - –†–µ–ø—É—Ç–∞—Ü–∏—è: +{quest[5]}
   - –ó–æ–ª–æ—Ç–æ: {quest[6]}
   - –û–ø—ã—Ç: {quest[7]}
    
–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ?"""
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_quest_{quest_id}"),
               types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="guild_quests"))
    
    bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, 
                        parse_mode="Markdown", reply_markup=markup)

def update_quest_progress(user_id, enemy_type):
    cursor.execute("SELECT current_quest, quest_progress FROM guild WHERE user_id = ?", (user_id,))
    quest_id, progress = cursor.fetchone()
    
    if quest_id:
        cursor.execute("SELECT target, required_count FROM guild_quests WHERE id = ?", (quest_id,))
        target, required = cursor.fetchone()
        
        if target in enemy_type:
            progress += 1
            cursor.execute("UPDATE guild SET quest_progress = ? WHERE user_id = ?", (progress, user_id))
            conn.commit()
            
            if progress >= required:
                cursor.execute("SELECT reward_reputation, reward_gold, reward_exp FROM guild_quests WHERE id = ?", (quest_id,))
                rep, gold, exp = cursor.fetchone()
                cursor.execute("UPDATE guild SET current_quest = NULL, quest_progress = 0, reputation = reputation + ? WHERE user_id = ?", (rep, user_id))
                cursor.execute("UPDATE users SET gold = gold + ?, exp = exp + ? WHERE user_id = ?", (gold, exp, user_id))
                conn.commit()
                return f"üèÜ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +{rep} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏, +{gold} –∑–æ–ª–æ—Ç–∞, +{exp} –æ–ø—ã—Ç–∞"
    return ""




@bot.callback_query_handler(lambda call: call.data.startswith("quest_"))
def accept_quest(call):
    quest_id = int(call.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è
    user_id = call.from_user.id
    
    cursor.execute("SELECT * FROM guild_quests WHERE id = ?", (quest_id,))
    quest = cursor.fetchone()
    
    if quest is None:
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    cursor.execute("SELECT current_quest FROM guild WHERE user_id = ?", (user_id,))
    if cursor.fetchone()[0]:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ
    cursor.execute("UPDATE guild SET current_quest = ?, quest_progress = 0 WHERE user_id = ?", (quest_id, user_id))
    conn.commit()
    bot.answer_callback_query(call.id, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")
    guild_menu(call)
    
    
    cursor.execute("UPDATE guild SET current_quest = ?, quest_progress = 0 WHERE user_id = ?", (quest_id, user_id))
    conn.commit()
    bot.answer_callback_query(call.id, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")
    guild_menu(call)
    
    
    cursor.execute("UPDATE guild SET current_quest = ?, quest_progress = 0 WHERE user_id = ?", (quest_id, user_id))
    conn.commit()
    bot.answer_callback_query(call.id, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")
    guild_menu(call)

    


def check_quests(user_id, enemy_name):
    
    cursor.execute("SELECT completed_quests FROM guild WHERE user_id = ?", (user_id,))
    quests = [q for q in (cursor.fetchone()[0] or "").split(",") if q]
    
    for quest_id in quests:
        cursor.execute("SELECT * FROM guild_quests WHERE id = ?", (quest_id,))
        quest = cursor.fetchone()
        
        if "–≥–æ–±–ª–∏–Ω" in quest[3].lower() and "–≥–æ–±–ª–∏–Ω" in enemy_name.lower():
            cursor.execute("UPDATE guild SET reputation = reputation + ? WHERE user_id = ?", 
                         (quest[5], user_id))
            conn.commit()
            return f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {quest[2]}!"
    return ""

@bot.callback_query_handler(func=lambda call: call.data == "–ì–∏–ª—å–¥–∏—è")
def guild_menu(call):
    user_id = call.from_user.id
    
    

    cursor.execute("INSERT OR IGNORE INTO guild (user_id) VALUES (?)", (user_id,))
    conn.commit()
    
    cursor.execute("SELECT reputation, level FROM guild WHERE user_id = ?", (user_id,))
    guild_data = cursor.fetchone()
    
    msg = f"""üè∞ *–ì–∏–ª—å–¥–∏—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π*
üìä –í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {guild_data[0]}/150
‚≠ê –£—Ä–æ–≤–µ–Ω—å –≥–∏–ª—å–¥–∏–∏: {guild_data[1]}
    
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="guild_quests"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
    
    bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, 
                        parse_mode="Markdown", reply_markup=markup)

loot_items = [
    ("–ó–æ–ª–æ—Ç–∞—è –º–æ–Ω–µ—Ç–∞", 1, 0.7),
    ("–†–µ–¥–∫–∏–π –º–µ—á", 3, 0.3),
    ("–©–∏—Ç –≥–µ—Ä–æ—è", 5, 0.2),
    ("–ö–æ–ª—å—Ü–æ —É–¥–∞—á–∏", 2, 0.4),
    ("–ó–µ–ª—å–µ —É–¥–∞—á–∏", 1, 0.25),
    ("–ó–µ–ª—å–µ —Å–∏–ª—ã", 1, 0.3),
    ("–ó–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", 1, 0.2),
    ("–≠–ª–∏–∫—Å–∏—Ä –∑–¥–æ—Ä–æ–≤—å—è", 1, 0.5)
]
for item in loot_items:
    cursor.execute("INSERT OR IGNORE INTO loot (item_name, min_level, chance) VALUES (?, ?, ?)", item)
conn.commit()

cursor.execute("""
CREATE TABLE IF NOT EXISTS effects (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    effect_type TEXT,
    power REAL,
    expires INTEGER,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)""")
conn.commit()


def get_enemy(level):
    base_hp = 50 + (level-1)*20
    base_attack = 10 + (level-1)*3
    
    
    enemies = [
        {"name": "–ì–æ–±–ª–∏–Ω", "hp": base_hp, "attack": base_attack, "min_level": 1},
        {"name": "–¢—Ä–æ–ª–ª—å", "hp": base_hp*1.5, "attack": base_attack*1.2, "min_level": 1},
        {"name": "–°–∫–µ–ª–µ—Ç", "hp": base_hp*0.8, "attack": base_attack*1.1, "min_level": 1},
        {"name": "–í–æ–ª–∫", "hp": base_hp*0.7, "attack": base_attack*0.9, "min_level": 1},
        {"name": "–ë–∞–Ω–¥–∏—Ç", "hp": base_hp, "attack": base_attack, "min_level": 2},
    ]
    
    
    if level >= 3:
        enemies.extend([
            {"name": "–û—Ä–∫", "hp": base_hp*1.8, "attack": base_attack*1.5, "min_level": 3},
            {"name": "–ü—Ä–∏–∑—Ä–∞–∫", "hp": base_hp*0.5, "attack": base_attack*1.8, "min_level": 3},
            {"name": "–ì—Ä–∏—Ñ–æ–Ω", "hp": base_hp*2, "attack": base_attack*1.7, "min_level": 4},
            {"name": "–†—ã—Ü–∞—Ä—å –¢—å–º—ã", "hp": base_hp*2.5, "attack": base_attack*2, "min_level": 5},
            {"name": "–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å", "hp": base_hp*3, "attack": base_attack*1.5, "min_level": 5},
        ])
    
    
    if level >= 8:
        enemies.extend([
            {"name": "–î–µ–º–æ–Ω", "hp": base_hp*3.5, "attack": base_attack*2.5, "min_level": 8},
            {"name": "–õ–µ–¥—è–Ω–æ–π –¥—Ä–∞–∫–æ–Ω", "hp": base_hp*4, "attack": base_attack*2.8, "min_level": 9},
            {"name": "–ù–µ–∫—Ä–æ–º–∞–Ω—Ç", "hp": base_hp*2, "attack": base_attack*3.5, "min_level": 10},
            {"name": "–¢–∏—Ç–∞–Ω", "hp": base_hp*5, "attack": base_attack*3, "min_level": 11},
            {"name": "–ê—Ä—Ö–∏–º–∞–≥", "hp": base_hp*3, "attack": base_attack*4, "min_level": 12},
        ])
    
   
    if level >= 13:
        enemies.extend([
            {"name": "–ö–æ—Ä–æ–ª—å –¥–µ–º–æ–Ω–æ–≤", "hp": base_hp*6, "attack": base_attack*4, "min_level": 13},
            {"name": "–î—Ä–µ–≤–Ω–∏–π –¥—Ä–∞–∫–æ–Ω", "hp": base_hp*8, "attack": base_attack*5, "min_level": 15},
            {"name": "–ë–æ–≥ —Ö–∞–æ—Å–∞", "hp": base_hp*10, "attack": base_attack*6, "min_level": 18},
            {"name": "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –±–µ–∑–¥–Ω—ã", "hp": base_hp*12, "attack": base_attack*7, "min_level": 20},
        ])
    
    
    available_enemies = [e for e in enemies if e["min_level"] <= level]
    
    
    weights = [1.0 / (e["hp"] * e["attack"] * 0.01) for e in available_enemies]
    total_weight = sum(weights)
    weights = [w / total_weight for w in weights]
    
    return random.choices(available_enemies, weights=weights, k=1)[0]

def calculate_escape_chance(user_id):
    cursor.execute("SELECT * FROM inventory WHERE user_id = ? AND item_name = '–ó–µ–ª—å–µ —É–¥–∞—á–∏'", (user_id,))
    has_luck_potion = cursor.fetchone() is not None
    return 45 if has_luck_potion else 70

def get_revive_options(user_id):
    user = get_user(user_id)
    max_hp = user[10] * 10  
    
    markup = types.InlineKeyboardMarkup()
    cursor.execute("SELECT death_time FROM deaths WHERE user_id = ?", (user_id,))
    death_time = cursor.fetchone()
    
    if death_time and (time.time() - death_time[0]) >= 300:  
        markup.add(types.InlineKeyboardButton("–í–æ–∑—Ä–æ–¥–∏—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–ø–æ–ª–Ω–æ–µ HP)", callback_data="revive_free"))
    else:
        wait_time = 300 - (time.time() - death_time[0]) if death_time else 300
        markup.add(types.InlineKeyboardButton(
            f"–ü–æ–¥–æ–∂–¥–∞—Ç—å {int(wait_time)} —Å–µ–∫", 
            callback_data="revive_wait"
        ))  
    
    
    sleep_hp_loss = int(max_hp * 0.1)
    new_hp = max_hp - sleep_hp_loss
    markup.add(types.InlineKeyboardButton(
        f"–ü–æ—Å–ø–∞—Ç—å (-10% HP, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è {new_hp}/{max_hp})", 
        callback_data="revive_sleep"
    ))  
    
    return markup


def give_loot(user_id, level):
    
    luck_multiplier = 1.0
    cursor.execute("SELECT power FROM effects WHERE user_id = ? AND effect_type = 'luck' AND expires > ?", 
                 (user_id, time.time()))
    if luck_effect := cursor.fetchone():
        luck_multiplier = luck_effect[0]
    
    
    cursor.execute("SELECT * FROM loot WHERE min_level <= ?", (level,))
    possible_loot = cursor.fetchall()
    
    weighted_loot = []
    for item in possible_loot:
        adjusted_chance = item[3] * luck_multiplier
        weighted_loot.append((item[0], item[1], item[2], adjusted_chance))
    

    total_chance = sum(item[3] for item in weighted_loot)
    rand = random.uniform(0, total_chance)
    current = 0
    
    for item in weighted_loot:
        current += item[3]
        if rand <= current:
            
            cursor.execute("SELECT * FROM inventory WHERE user_id = ? AND item_name = ?", (user_id, item[1]))
            existing = cursor.fetchone()
            
            if existing:
                
                cursor.execute("UPDATE inventory SET quantity = quantity + 1 WHERE id = ?", (existing[0],))
            else:
                
                cursor.execute("INSERT INTO inventory (user_id, item_name, item_type, effect) VALUES (?, ?, ?, ?)", 
                              (user_id, item[1], "loot", "–æ–±—ã—á–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"))
            
            conn.commit()
            return item[1]
    
    return None

@bot.callback_query_handler(lambda call: call.data.startswith("revive_"))
def handle_revive(call: types.CallbackQuery):
    user_id = call.from_user.id
    user = get_user(user_id)
    max_hp = user[10] * 10  
    
    try:
        if call.data == "revive_sleep":
            
            new_hp = max(1, int(max_hp * 0.9))  
            
            
            new_stamina = max(1, new_hp // 10)
            cursor.execute("UPDATE users SET stamina = ? WHERE user_id = ?", (new_stamina, user_id))
            
            cursor.execute("DELETE FROM deaths WHERE user_id = ?", (user_id,))
            conn.commit()
            
            msg = (f"üí§ –í—ã –ø–æ—Å–ø–∞–ª–∏ –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ 10% HP!\n"
                  f"‚ù§Ô∏è –¢–µ–∫—É—â–µ–µ HP: {new_hp}/{max_hp}\n"
                  f"–í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–∏–ª—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!")
        
        elif call.data == "revive_free":
           
            cursor.execute("DELETE FROM deaths WHERE user_id = ?", (user_id,))
            conn.commit()
            msg = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ! –í–∞—à–µ HP –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        
        elif call.data == "revive_wait":
            cursor.execute("SELECT death_time FROM deaths WHERE user_id = ?", (user_id,))
            death_time = cursor.fetchone()[0]
            time_left = 300 - (time.time() - death_time)
            
            if time_left > 0:
                msg = f"‚è≥ –î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {int(time_left)} —Å–µ–∫—É–Ω–¥"
            else:
                cursor.execute("DELETE FROM deaths WHERE user_id = ?", (user_id,))
                conn.commit()
                msg = "üÜì –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ! –í—ã –≤–æ–∑—Ä–æ–∂–¥–µ–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
        
        bot.edit_message_text(msg, call.message.chat.id, call.message.message_id)
        
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ì–∏–ª—å–¥–∏—è", callback_data="–ì–∏–ª—å–¥–∏—è"),
                types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"),
                types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="–ú–∞–≥–∞–∑–∏–Ω"),
                types.InlineKeyboardButton("–ë–æ–π", callback_data="start_battle"))
        bot.send_message(call.message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_revive: {str(e)}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@bot.callback_query_handler(lambda call: call.data.startswith("battle_"))
def handle_battle_actions(call: types.CallbackQuery):
    user_id = call.from_user.id
    battle = BATTLE_STATES.get(user_id)
    if not battle:
        bot.answer_callback_query(call.id, "–ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return

    user = get_user(user_id)
    enemy = battle['enemy']
    
    if call.data == "battle_attack":
        
        player_damage = user[7] + random.randint(1, 5)
        battle['enemy_hp'] -= player_damage
        
        
        enemy_damage = enemy['attack'] + random.randint(1, 3) - user[10]//2
        battle['user_hp'] -= max(enemy_damage, 0)
        
        
        if battle['enemy_hp'] <= 0:
            exp_gain = random.choices(
            [50, 100, 150],
            weights=[50, 40, 10]
        )[0]
            
            exp_gain = enemy['attack'] * 10
            gold_gain = random.randint(10, 50)
            loot = give_loot(user_id, user[13])
            quest_result = check_quests(user_id, enemy['name'])
            level_up_msg = check_guild_level(user_id)

            msg = (f"üèÜ –ü–æ–±–µ–¥–∞!\n"
                f"{quest_result}\n"
                f"{level_up_msg}\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ: {exp_gain} –æ–ø—ã—Ç–∞ –∏ {gold_gain} –∑–æ–ª–æ—Ç–∞\n"
                f"–î–æ–±—ã—á–∞: {loot if loot else '–Ω–µ—Ç'}")
            
            
            cursor.execute("UPDATE users SET exp = exp + ?, gold = gold + ? WHERE user_id = ?",
                        (exp_gain, gold_gain, user_id))
            conn.commit()
            
            
            new_level = check_level_up(user_id)
            level_up_msg = f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {new_level}!" if new_level else ""
            
            markup = types.InlineKeyboardMarkup()  
            markup.add(types.InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
            
            msg = (f"üèÜ –ü–æ–±–µ–¥–∞!\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ: {exp_gain} –æ–ø—ã—Ç–∞ –∏ {gold_gain} –∑–æ–ª–æ—Ç–∞\n"
                f"–î–æ–±—ã—á–∞: {loot if loot else '–Ω–µ—Ç'}"
                f"{level_up_msg}")
                
            bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=markup)  
            del BATTLE_STATES[user_id]
            return
            
        elif battle['user_hp'] <= 0:
            
            cursor.execute("INSERT OR REPLACE INTO deaths (user_id, death_time) VALUES (?, ?)",
                         (user_id, int(time.time())))
            conn.commit()
            
            markup = get_revive_options(user_id)
            bot.edit_message_text("‚ò†Ô∏è –í—ã –ø–∞–ª–∏ –≤ –±–æ—é!", call.message.chat.id, call.message.message_id, reply_markup=markup)
            del BATTLE_STATES[user_id]
            return
            

        show_battle_interface(call.message, user_id)
    
    elif call.data == "battle_flee":
        
        escape_chance = calculate_escape_chance(user_id)  
        
        if random.randint(1, 100) <= escape_chance:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
            bot.edit_message_text("üèÉ‚ôÇÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª–∏!", 
                                call.message.chat.id, 
                                call.message.message_id,
                                reply_markup=markup)
            del BATTLE_STATES[user_id]
        else:
            enemy_damage = enemy['attack'] + random.randint(1, 3)
            battle['user_hp'] -= enemy_damage
            bot.answer_callback_query(call.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å! –ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: {enemy_damage}")
            show_battle_interface(call.message, user_id)

@bot.callback_query_handler(lambda call: call.data.startswith("revive_"))
def handle_revive(call: types.CallbackQuery):
    user_id = call.from_user.id
    user = get_user(user_id)
    msg = "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"  
    
    try:
        if call.data == "revive_sleep":
            cursor.execute("SELECT death_time FROM deaths WHERE user_id = ?", (user_id,))
            death_time = cursor.fetchone()[0]
            time_diff = time.time() - death_time
            
            if time_diff < 300:  
                new_hp = int(user[10] * 0.85)
                cursor.execute("UPDATE users SET stamina = ? WHERE user_id = ?", (new_hp//10, user_id))
                msg = f"üí§ –í—ã –ø–æ—Å–ø–∞–ª–∏ –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ 15% HP! –¢–µ–∫—É—â–µ–µ HP: {new_hp}"
            else:
                msg = "üí§ –í—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É–ª–∏ –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏ HP!"
            
            cursor.execute("DELETE FROM deaths WHERE user_id = ?", (user_id,))
            conn.commit()

        elif call.data == "revive_potion":
            
            cursor.execute("DELETE FROM deaths WHERE user_id = ?", (user_id,))
            cursor.execute("DELETE FROM inventory WHERE user_id = ? AND item_name = '–ó–µ–ª—å–µ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è'", (user_id,))
            conn.commit()
            msg = "‚öóÔ∏è –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∑–µ–ª—å–µ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è!"
            
        elif call.data == "revive_free":
            cursor.execute("DELETE FROM deaths WHERE user_id = ?", (user_id,))
            conn.commit()
            msg = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ!"
            
        elif call.data == "revive_wait":
            msg = "‚è≥ –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å 5 –º–∏–Ω—É—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è"
            
        bot.edit_message_text(msg, call.message.chat.id, call.message.message_id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_revive: {str(e)}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ì–∏–ª—å–¥–∏—è", callback_data="–ì–∏–ª—å–¥–∏—è"),
           types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"),
           types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="–ú–∞–≥–∞–∑–∏–Ω"),
           types.InlineKeyboardButton("–ë–æ–π", callback_data="start_battle"))
    bot.send_message(call.message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)



def get_exp_to_next_level(current_level):
    if current_level < 5:
        return 500
    elif current_level < 10:
        return 700
    else:
        return 1000
    
def get_exp_requirements(level):
    return 500 * (1.5 ** (level-1))

def check_level_up(user_id):
    user = get_user(user_id)
    required = get_exp_requirements(user[13])
    
    if user[14] >= required:
        new_level = user[13] + 1
        class_ = user[6]
        
        
        updates = {
            'strength': 0,
            'agility': 0,
            'intellect': 0,
            'stamina': 1,  
            'luck': 0
        }
        
        
        if class_ == '–í–æ–∏–Ω':
            updates['strength'] = 2
        elif class_ == '–õ—É—á–Ω–∏–∫':
            updates['agility'] = 2
        elif class_ == '–ú–∞–≥':
            updates['intellect'] = 2
        elif class_ == '–í–æ—Ä':
            updates['luck'] = 2
        
        
        cursor.execute(f"""UPDATE users SET
            level = ?,
            exp = exp - ?,
            exp_to_next_level = ?,
            strength = strength + ?,
            agility = agility + ?,
            intellect = intellect + ?,
            stamina = stamina + ?,
            luck = luck + ?
            WHERE user_id = ?""",
            (new_level, 
             required, 
             get_exp_requirements(new_level),
             updates['strength'],
             updates['agility'],
             updates['intellect'],
             updates['stamina'],
             updates['luck'],
             user_id))
        
        conn.commit()
        
        
        bonus_text = []
        if updates['strength']: bonus_text.append(f"üí™ –°–∏–ª–∞ +{updates['strength']}")
        if updates['agility']: bonus_text.append(f"üèπ –õ–æ–≤–∫–æ—Å—Ç—å +{updates['agility']}")
        if updates['intellect']: bonus_text.append(f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +{updates['intellect']}")
        if updates['luck']: bonus_text.append(f"üçÄ –£–¥–∞—á–∞ +{updates['luck']}")
        bonus_text.append(f"‚ù§Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å +{updates['stamina']} (+{updates['stamina']*10} HP)")
        
        return {
            'new_level': new_level,
            'bonuses': "\n".join(bonus_text)
        }
    return None

def show_battle_interface(message, user_id):
    battle = BATTLE_STATES[user_id]
    enemy = battle["enemy"]
    user = get_user(user_id)
    
    
    cursor.execute("SELECT effect_type, power FROM effects WHERE user_id = ? AND expires > ?", 
                 (user_id, time.time()))
    effects = cursor.fetchall()
    effect_text = "\n".join([f"‚ú® {eff[0].capitalize()} +{int((eff[1]-1)*100)}%" for eff in effects])
    
    msg_text = (f"‚öîÔ∏è –ë–æ–π —Å {enemy['name']} (–£—Ä. {user[13]})\n"
               f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {battle['user_hp']}/{user[10] * 10}\n"
               f"üíÄ –ó–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞: {battle['enemy_hp']}/{enemy['hp']}")
    
    if effect_text:
        msg_text += f"\n\n–ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:\n{effect_text}"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="battle_attack"),
               types.InlineKeyboardButton(f"–°–±–µ–∂–∞—Ç—å ({calculate_escape_chance(user_id)}%)", callback_data="battle_flee"))
    
    
    inventory = get_user_inventory(user_id)
    potion_buttons = []
    for item in inventory:
        if "–ó–µ–ª—å–µ" in item[2] or "–≠–ª–∏–∫—Å–∏—Ä" in item[2]:
            potion_buttons.append(types.InlineKeyboardButton(f"‚öóÔ∏è {item[2]} x{item[5]}", callback_data=f"use_{item[0]}"))
    
    
    for i in range(0, len(potion_buttons), 2):
        if i+1 < len(potion_buttons):
            markup.row(potion_buttons[i], potion_buttons[i+1])
        else:
            markup.add(potion_buttons[i])
    
    bot.edit_message_text(msg_text, message.chat.id, message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "start_battle")
def start_battle(call: types.CallbackQuery):
    user = get_user(call.from_user.id)
    enemy = get_enemy(user[13])
    BATTLE_STATES[call.from_user.id] = {
        "enemy": enemy,
        "user_hp": user[10] * 10,
        "enemy_hp": enemy["hp"],
        "temp_buffs": {}
    }
    show_battle_interface(call.message, call.from_user.id)




def get_user(user_id):
    cursor.execute("""SELECT *, 
        (SELECT GROUP_CONCAT(effect_type || ':' || power) 
         FROM effects 
         WHERE user_id = ? AND expires > ?) as active_effects
        FROM users WHERE user_id = ?""",
        (user_id, time.time(), user_id))
    return cursor.fetchone()

def get_user_inventory(user_id):
    cursor.execute("SELECT * FROM inventory WHERE user_id = ?", (user_id,))
    return cursor.fetchall()

def progress_bar(current, total, length=10):
    percent = min(current / total, 1.0)
    return "üü©" * int(percent * length) + "‚¨ú" * (length - int(percent * length))

@bot.message_handler(commands=["start"])
def start(message: types.Message):
    user = get_user(message.from_user.id)
    
    if user:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="–ú–∞–≥–∞–∑–∏–Ω"),
                   types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"),
                   types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–∞—è", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
        
        welcome_msg = (f"‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user[4]}!</b> ‚ú®\n\n"
                      f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user[13]} ({user[14]}/{user[15]})\n"
                      f"üí∞ –ó–æ–ª–æ—Ç–æ: {user[16]}\n\n"
                      f"üß¨ –†–∞—Å–∞: {user[5]}\nüéØ –ö–ª–∞—Å—Å: {user[6]}\n\n"
                      f"üí™ –°–∏–ª–∞: {user[7]}\nüèπ –õ–æ–≤–∫–æ—Å—Ç—å: {user[8]}\n"
                      f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {user[9]}\nüõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user[10]}\n"
                      f"üçÄ –£–¥–∞—á–∞: {user[11]}\n\n‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {user[12]}")
        bot.send_message(message.chat.id, welcome_msg, parse_mode="HTML", reply_markup=markup)
    else:
        state[message.from_user.id] = {
            "name": None, "race": None, "class": None,
            "strength": 5, "agility": 5, "intellect": 5,
            "stamina": 5, "luck": 5, "abilities": [],
            "level": 1, "exp": 0, "exp_to_next_level": 500, "gold": 100
        }
        bot.send_message(message.chat.id, "üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", parse_mode="HTML")
        bot.register_next_step_handler(message, process_name_step)

def process_name_step(message: types.Message):
    state[message.from_user.id]["name"] = message.text
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ß–µ–ª–æ–≤–µ–∫", callback_data="race:–ß–µ–ª–æ–≤–µ–∫"),
               types.InlineKeyboardButton("–≠–ª—å—Ñ", callback_data="race:–≠–ª—å—Ñ"),
               types.InlineKeyboardButton("–û—Ä–∫", callback_data="race:–û—Ä–∫"),
               types.InlineKeyboardButton("–ì–Ω–æ–º", callback_data="race:–ì–Ω–æ–º"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É:", reply_markup=markup)

@bot.callback_query_handler(lambda call: call.data.startswith("race:"))
def process_race(call: types.CallbackQuery):
    race = call.data.split(":")[1]
    state[call.from_user.id]["race"] = race
    stats = state[call.from_user.id]
    
    race_bonuses = {
        "–ß–µ–ª–æ–≤–µ–∫": "–í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ +1",
        "–≠–ª—å—Ñ": "–õ–æ–≤–∫–æ—Å—Ç—å +2, –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +1",
        "–û—Ä–∫": "–°–∏–ª–∞ +2, –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å +1",
        "–ì–Ω–æ–º": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +2, –£–¥–∞—á–∞ +1"
    }
    
    bot.edit_message_text(
        f"üß¨ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—É: <b>{race}</b>\n"
        f"‚ú® –ë–æ–Ω—É—Å—ã: {race_bonuses[race]}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
        call.message.chat.id, 
        call.message.message_id,
        parse_mode="HTML"
    )
    
    markup = types.InlineKeyboardMarkup()
    classes = [
        ("–í–æ–∏–Ω", "üí™ –°–∏–ª–∞ +2, –£–¥–∞—Ä —â–∏—Ç–æ–º"),
        ("–õ—É—á–Ω–∏–∫", "üèπ –õ–æ–≤–∫–æ—Å—Ç—å +2, –ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª"),
        ("–ú–∞–≥", "üîÆ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +3, –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä"),
        ("–í–æ—Ä", "üé≤ –£–¥–∞—á–∞ +2, –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä")
    ]
    for class_name, bonus in classes:
        markup.add(types.InlineKeyboardButton(
            f"{class_name} - {bonus}", 
            callback_data=f"class:{class_name}"
        ))
        
    bot.send_message(call.message.chat.id, 
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:</b>\n\n"
        "1. –í–æ–∏–Ω - –°–∏–ª–∞ +2, –£–¥–∞—Ä —â–∏—Ç–æ–º\n"
        "2. –õ—É—á–Ω–∏–∫ - –õ–æ–≤–∫–æ—Å—Ç—å +2, –ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª\n"
        "3. –ú–∞–≥ - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +3, –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä\n"
        "4. –í–æ—Ä - –£–¥–∞—á–∞ +2, –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(lambda call: call.data.startswith("class:"))
def process_class(call: types.CallbackQuery):
    class_ = call.data.split(":")[1]
    state[call.from_user.id]["class"] = class_
    stats = state[call.from_user.id]
    
    class_bonuses = {
        "–í–æ–∏–Ω": {"strength": 2, "abilities": ["üõ° –£–¥–∞—Ä —â–∏—Ç–æ–º"]},
        "–õ—É—á–Ω–∏–∫": {"agility": 2, "abilities": ["üéØ –ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª"]},
        "–ú–∞–≥": {"intellect": 3, "abilities": ["üî• –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä"]},
        "–í–æ—Ä": {"luck": 2, "abilities": ["üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä"]}
    }
    
    bonuses = class_bonuses[class_]
    for stat, value in bonuses.items():
        if stat in stats:
            stats[stat] += value
        else:
            stats["abilities"] = value
    
    final_stats = (
        f"üß¨ –†–∞—Å–∞: {stats['race']}\n"
        f"üéØ –ö–ª–∞—Å—Å: {class_}\n\n"
        f"üí™ –°–∏–ª–∞: {stats['strength']}\n"
        f"üèπ –õ–æ–≤–∫–æ—Å—Ç—å: {stats['agility']}\n"
        f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {stats['intellect']}\n"
        f"üõ° –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {stats['stamina']}\n"
        f"üçÄ –£–¥–∞—á–∞: {stats['luck']}\n\n"
        f"‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {', '.join(stats['abilities'])}"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"))
    
    bot.edit_message_text(
        f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ –≥–æ—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n{final_stats}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode="HTML"
    )
    
    user_data = state[call.from_user.id]
    cursor.execute("""INSERT INTO users 
        (user_id, username, first_name, last_name, name, race, class, strength, agility, intellect, stamina, luck, abilities, gold) 
        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)""", 
        (
            call.from_user.id,
            call.from_user.username,
            call.from_user.first_name,
            call.from_user.last_name,
            user_data["name"],
            user_data["race"],
            class_,
            user_data["strength"],
            user_data["agility"],
            user_data["intellect"],
            user_data["stamina"],
            user_data["luck"],
            ", ".join(user_data["abilities"]),
            user_data["gold"]
        ))
    conn.commit()
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="–ú–∞–≥–∞–∑–∏–Ω"),
               types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"),
               types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–∞—è", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
    
    profile_msg = (f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!\n\nüìù –ò–º—è: {user_data['name']}\n"
                  f"üß¨ –†–∞—Å–∞: {user_data['race']}\nüéØ –ö–ª–∞—Å—Å: {class_}\n\n"
                  f"üí™ –°–∏–ª–∞: {user_data['strength']}\nüèπ –õ–æ–≤–∫–æ—Å—Ç—å: {user_data['agility']}\n"
                  f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {user_data['intellect']}\nüõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user_data['stamina']}\n"
                  f"üçÄ –£–¥–∞—á–∞: {user_data['luck']}\n\n‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {', '.join(user_data['abilities'])}")
    bot.edit_message_text(profile_msg, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call: types.CallbackQuery):
    user = get_user(call.from_user.id)
    if not user:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return

    
    if call.data.startswith("use_"):
        item_id = int(call.data.split("_")[1])
        user_id = call.from_user.id
        inventory = get_user_inventory(user_id)
        item = next((i for i in inventory if i[0] == item_id), None)
        
        if not item:
            bot.answer_callback_query(call.id, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        try:
            effect_msg = ""
            battle = BATTLE_STATES.get(user_id)
            user = get_user(user_id)
            
            if "–ó–µ–ª—å–µ —Å–∏–ª—ã" in item[2]:
                expires = int(time.time()) + 600  
                cursor.execute("INSERT INTO effects (user_id, effect_type, power, expires) VALUES (?, ?, ?, ?)",
                             (user_id, "strength", 1.5, expires))
                effect_msg = "üí™ –°–∏–ª–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 50% –Ω–∞ 10 –º–∏–Ω—É—Ç!"
                
            elif "–ó–µ–ª—å–µ –ª–æ–≤–∫–æ—Å—Ç–∏" in item[2]:
                expires = int(time.time()) + 600 
                cursor.execute("INSERT INTO effects (user_id, effect_type, power, expires) VALUES (?, ?, ?, ?)",
                             (user_id, "agility", 1.5, expires))
                effect_msg = "üèÉ‚ôÇÔ∏è –õ–æ–≤–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 50% –Ω–∞ 10 –º–∏–Ω—É—Ç!"
                
            elif "–ó–µ–ª—å–µ —É–¥–∞—á–∏" in item[2]:
                expires = int(time.time()) + 600  
                cursor.execute("INSERT INTO effects (user_id, effect_type, power, expires) VALUES (?, ?, ?, ?)",
                             (user_id, "luck", 2.0, expires))
                effect_msg = "üçÄ –£–¥–∞—á–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞! –®–∞–Ω—Å –ª—É—Ç–∞ –∏ –æ–ø—ã—Ç +100% –Ω–∞ 10 –º–∏–Ω—É—Ç!"
                
            elif "–≠–ª–∏–∫—Å–∏—Ä –∑–¥–æ—Ä–æ–≤—å—è" in item[2]:
                if battle:
                    max_hp = user[10] * 10
                    battle['user_hp'] = max_hp
                    effect_msg = "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –±–æ—é!"
                else:
                    cursor.execute("UPDATE users SET stamina = ? WHERE user_id = ?", (user[10], user_id))
                    effect_msg = "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
            
            
            if item[5] > 1:
                cursor.execute("UPDATE inventory SET quantity = quantity - 1 WHERE id = ?", (item_id,))
            else:
                cursor.execute("DELETE FROM inventory WHERE id = ?", (item_id,))
            conn.commit()
            
            bot.answer_callback_query(call.id, effect_msg)
            
            
            if battle:
                show_battle_interface(call.message, user_id)
            else:
                bot.send_message(call.message.chat.id, effect_msg)
            return
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {str(e)}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞!")
            return

    
    elif call.data == "–ì–ª–∞–≤–Ω–∞—è":
                markup = types.InlineKeyboardMarkup()
                markup.row(
                    types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"),
                    types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="–ú–∞–≥–∞–∑–∏–Ω")
                )
                markup.row(
                    types.InlineKeyboardButton("–ì–∏–ª—å–¥–∏—è", callback_data="–ì–∏–ª—å–¥–∏—è"),
                    types.InlineKeyboardButton("–ë–æ–π", callback_data="start_battle")
                )
                bot.edit_message_text(f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ü—Ä–∏–≤–µ—Ç, {user[4]}!", call.message.chat.id, call.message.message_id, reply_markup=markup)
    
    elif call.data == "–ü—Ä–æ—Ñ–∏–ª—å":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
                   types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
        
        profile_msg = (f"üìä –ü—Ä–æ—Ñ–∏–ª—å {user[4]}\n\n"
                      f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user[13]}\n"
                      f"üìà –û–ø—ã—Ç: {user[14]}/{user[15]}\n"
                      f"üí∞ –ó–æ–ª–æ—Ç–æ: {user[16]}\n\n"
                      f"üí™ –°–∏–ª–∞: {user[7]}\nüèπ –õ–æ–≤–∫–æ—Å—Ç—å: {user[8]}\n"
                      f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {user[9]}\nüõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user[10]}\n"
                      f"üçÄ –£–¥–∞—á–∞: {user[11]}\n\n"
                      f"{progress_bar(user[14], user[15])}")
        bot.edit_message_text(profile_msg, call.message.chat.id, call.message.message_id, reply_markup=markup)
    
    elif call.data == "–ú–∞–≥–∞–∑–∏–Ω":
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("–ó–µ–ª—å–µ —Å–∏–ª—ã (100g)", callback_data="buy:strength_potion"),
            types.InlineKeyboardButton("–ó–µ–ª—å–µ –ª–æ–≤–∫–æ—Å—Ç–∏ (100g)", callback_data="buy:agility_potion")
        )
        markup.row(
            types.InlineKeyboardButton("–ó–µ–ª—å–µ —É–¥–∞—á–∏ (150g)", callback_data="buy:luck_potion"),
            types.InlineKeyboardButton("–≠–ª–∏–∫—Å–∏—Ä –∑–¥–æ—Ä–æ–≤—å—è (200g)", callback_data="buy:heal_potion")
        )
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
        bot.edit_message_text(f"üõí –ú–∞–≥–∞–∑–∏–Ω\nüí∞ –ó–æ–ª–æ—Ç–æ: {user[16]}", call.message.chat.id, call.message.message_id, reply_markup=markup)
    
    elif call.data.startswith("buy:"):
        item_type = call.data.split(":")[1]
        prices = {
            "strength_potion": 100,
            "agility_potion": 100,
            "luck_potion": 150,
            "heal_potion": 200
        }
        
        if user[16] < prices[item_type]:
            bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")
            return
        
        items = {
            "strength_potion": {"name": "–ó–µ–ª—å–µ —Å–∏–ª—ã", "effect": "üí™ +50% —Å–∏–ª—ã –Ω–∞ 30 –º–∏–Ω—É—Ç"},
            "agility_potion": {"name": "–ó–µ–ª—å–µ –ª–æ–≤–∫–æ—Å—Ç–∏", "effect": "üèÉ‚ôÇÔ∏è +50% –ª–æ–≤–∫–æ—Å—Ç–∏ –Ω–∞ 30 –º–∏–Ω—É—Ç"},
            "luck_potion": {"name": "–ó–µ–ª—å–µ —É–¥–∞—á–∏", "effect": "üçÄ +100% —É–¥–∞—á–∏ –Ω–∞ 1 —á–∞—Å"},
            "heal_potion": {"name": "–≠–ª–∏–∫—Å–∏—Ä –∑–¥–æ—Ä–æ–≤—å—è", "effect": "‚ù§Ô∏è –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"}
        }
        
        item = items[item_type]
        
        
        cursor.execute("UPDATE users SET gold = gold - ? WHERE user_id = ?", 
                    (prices[item_type], call.from_user.id))
        
        
        cursor.execute("SELECT * FROM inventory WHERE user_id = ? AND item_name = ?", 
                    (call.from_user.id, item['name']))
        if existing := cursor.fetchone():
            cursor.execute("UPDATE inventory SET quantity = quantity + 1 WHERE id = ?", (existing[0],))
        else:
            cursor.execute("INSERT INTO inventory (user_id, item_name, item_type, effect) VALUES (?,?,?,?)",
                        (call.from_user.id, item['name'], item_type, item['effect']))
        
        conn.commit()
        bot.answer_callback_query(call.id, f"–ö—É–ø–ª–µ–Ω–æ {item['name']}!")
        handle_callbacks(call)
    
    elif call.data == "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
        inventory = get_user_inventory(call.from_user.id)
        markup = types.InlineKeyboardMarkup()
        for item in inventory:
            markup.add(types.InlineKeyboardButton(f"{item[2]} x{item[5]}", callback_data=f"item_{item[0]}"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"))
        bot.edit_message_text("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", call.message.chat.id, call.message.message_id, reply_markup=markup)
    
    elif call.data == "start_battle":
        enemy = random.choice([{"name": "–ì–æ–±–ª–∏–Ω", "hp": 50, "attack": 8}, 
                             {"name": "–¢—Ä–æ–ª–ª—å", "hp": 100, "attack": 15}])
        BATTLE_STATES[call.from_user.id] = {
            "enemy": enemy,
            "user_hp": user[10] * 10,
            "enemy_hp": enemy["hp"],
            "temp_buffs": {}
        }
        show_battle_interface(call.message, call.from_user.id)

def show_battle_interface(message, user_id):
    battle = BATTLE_STATES[user_id]
    enemy = battle["enemy"]
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="battle_attack"),
               types.InlineKeyboardButton("–°–±–µ–∂–∞—Ç—å", callback_data="battle_flee"))
    
    for item in get_user_inventory(user_id):
        if "–ó–µ–ª—å–µ" in item[2]:
            markup.add(types.InlineKeyboardButton(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {item[2]}", callback_data=f"use_{item[0]}"))
    
    msg_text = (f"‚öîÔ∏è –ë–æ–π —Å {enemy['name']}!\n"
               f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {battle['user_hp']}\n"
               f"üíÄ –ó–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞: {battle['enemy_hp']}")
    bot.edit_message_text(msg_text, message.chat.id, message.message_id, reply_markup=markup)

def apply_effect(user_id, effect_type, power, duration):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        expires = int(time.time()) + duration
        cursor.execute("""
            INSERT INTO effects (user_id, effect_type, power, expires)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(user_id, effect_type) DO UPDATE SET
                power = excluded.power,
                expires = excluded.expires
        """, (user_id, effect_type, power, expires))
        conn.commit()
    except sqlite3.Error as e:
        print(f"Error applying effect: {str(e)}")

ITEM_HANDLERS = {
    'heal_potion': lambda user, battle: {
        'heal': user[10]*10,
        'message': "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
    },
    'strength_potion': lambda user, battle: {
        'effect': ('strength', 1.5, 600),
        'message': "üí™ –°–∏–ª–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 50% –Ω–∞ 10 –º–∏–Ω—É—Ç!"
    }
}


@bot.callback_query_handler(lambda call: call.data.startswith("use_"))
def handle_item_use(call: types.CallbackQuery):
    user_id = call.from_user.id
    item_id = int(call.data.split("_")[1])
    inventory = get_user_inventory(user_id)
    item = next((i for i in inventory if i[0] == item_id), None)
    
    if not item:
        bot.answer_callback_query(call.id, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    try:
        effect_msg = ""
        battle = BATTLE_STATES.get(user_id)
        user = get_user(user_id)
        
        
        handler = ITEM_HANDLERS.get(item[3])  
        if handler:
            effect = handler(user, battle)
            if effect.get('heal'):
                battle['user_hp'] = min(battle['user_hp'] + effect['heal'], user[10]*10)
                effect_msg = effect['message']
            if effect.get('effect'):
                apply_effect(user_id, *effect['effect'])
                effect_msg = effect['message']
        else:
            
            if "–ó–µ–ª—å–µ —Å–∏–ª—ã" in item[2]:
                apply_effect(user_id, "strength", 1.5, 600)
                effect_msg = "üí™ –°–∏–ª–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 50% –Ω–∞ 10 –º–∏–Ω—É—Ç!"
            elif "–ó–µ–ª—å–µ –ª–æ–≤–∫–æ—Å—Ç–∏" in item[2]:
                apply_effect(user_id, "agility", 1.5, 600)
                effect_msg = "üèÉ‚ôÇÔ∏è –õ–æ–≤–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 50% –Ω–∞ 10 –º–∏–Ω—É—Ç!"
            elif "–ó–µ–ª—å–µ —É–¥–∞—á–∏" in item[2]:
                apply_effect(user_id, "luck", 2.0, 600)
                effect_msg = "üçÄ –£–¥–∞—á–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞! –®–∞–Ω—Å –ª—É—Ç–∞ –∏ –æ–ø—ã—Ç +100% –Ω–∞ 10 –º–∏–Ω—É—Ç!"
            elif "–≠–ª–∏–∫—Å–∏—Ä –∑–¥–æ—Ä–æ–≤—å—è" in item[2]:
                if battle:
                    max_hp = user[10] * 10
                    battle['user_hp'] = max_hp
                    effect_msg = "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –±–æ—é!"
                else:
                    cursor.execute("UPDATE users SET stamina = ? WHERE user_id = ?", (user[10], user_id))
                    effect_msg = "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"

        
        if item[5] > 1:
            cursor.execute("UPDATE inventory SET quantity = quantity - 1 WHERE id = ?", (item_id,))
        else:
            cursor.execute("DELETE FROM inventory WHERE id = ?", (item_id,))
        conn.commit()

        bot.answer_callback_query(call.id, effect_msg)
        
        if battle:
            show_battle_interface(call.message, user_id)
        else:
            bot.send_message(call.message.chat.id, effect_msg)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞!")
        
@bot.message_handler(commands=["addexp"])
def add_exp_command(message: types.Message):
    
    if message.from_user.id != 5863827462: 
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    try:
        # –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /addexp @username 100
        args = message.text.split()
        if len(args) != 3:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addexp @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            return
            
        username = args[1].replace("@", "")
        amount = int(args[2])
        
        cursor.execute("UPDATE users SET exp = exp + ? WHERE username = ?", (amount, username))
        conn.commit()
        
        
        cursor.execute("SELECT user_id FROM users WHERE username = ?", (username,))
        if user_id := cursor.fetchone():
            if new_level := check_level_up(user_id[0]):
                bot.reply_to(message, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}. –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level}")
            else:
                bot.reply_to(message, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")
        else:
            bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")        
        

def calculate_player_damage(user_id):
    user = get_user(user_id)
    base_damage = user[7]  
    cursor.execute("SELECT power FROM effects WHERE user_id = ? AND effect_type = 'strength' AND expires > ?", 
                 (user_id, time.time()))
    if strength_effect := cursor.fetchone():
        base_damage *= strength_effect[0]
    return int(base_damage + random.randint(1, 5))        

def handle_death(user_id):
    cursor.execute("INSERT OR REPLACE INTO deaths VALUES (?, ?)", (user_id, int(time.time())))
    conn.commit()
    
    
    cursor.execute("DELETE FROM effects WHERE user_id = ?", (user_id,))
    conn.commit()
    
    
    cursor.execute("UPDATE users SET gold = gold * 0.7 WHERE user_id = ?", (user_id,))
    conn.commit()

def format_battle_message(user_id, battle):
    user = get_user(user_id)
    enemy = battle['enemy']
    hp_bar = progress_bar(battle['user_hp'], user[10]*10)
    enemy_hp_bar = progress_bar(battle['enemy_hp'], enemy['hp'])
    
    return f"""
‚öîÔ∏è *–ë–æ–π —Å {enemy['name']}*
{hp_bar} –í–∞—à–µ HP: {battle['user_hp']}/{user[10]*10}
{enemy_hp_bar} HP –≤—Ä–∞–≥–∞: {battle['enemy_hp']}/{enemy['hp']}
"""

def generate_enemy(level):
    tier = min(level // 5 + 1, 4)
    templates = {
        1: ["–ì–æ–±–ª–∏–Ω", "–í–æ–ª–∫"],
        2: ["–û—Ä–∫", "–†—ã—Ü–∞—Ä—å"],
        3: ["–î–µ–º–æ–Ω", "–î—Ä–∞–∫–æ–Ω"],
        4: ["–ë–æ—Å—Å"]
    }
    
    enemy_type = random.choice(templates[tier])
    multiplier = 1 + (tier-1)*0.5
    
    return {
        'name': f"{enemy_type} –£—Ä. {level}",
        'hp': 50 * level * multiplier,
        'attack': 10 * level * multiplier
    }

def get_active_effects(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    effects = {}
    try:
        cursor.execute("""
            SELECT effect_type, power 
            FROM effects 
            WHERE user_id = ? AND expires > ?
        """, (user_id, int(time.time())))
        for row in cursor.fetchall():
            effects[row[0]] = row[1]
    except sqlite3.Error as e:
        print(f"Error getting effects: {str(e)}")
    return effects




def get_user_stats(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats = {}
    try:
        
        user = get_user(user_id)
        if not user:
            return None
            
        
        cursor.execute("""
            SELECT 
                COUNT(*) AS total_battles,
                SUM(CASE WHEN result = 'win' THEN 1 ELSE 0 END) AS wins,
                SUM(CASE WHEN result = 'lose' THEN 1 ELSE 0 END) AS losses
            FROM battles 
            WHERE user_id = ?
        """, (user_id,))
        battle_stats = cursor.fetchone() or (0, 0, 0)

        
        cursor.execute("SELECT achievement_id FROM user_achievements WHERE user_id = ?", (user_id,))
        achievements = [row[0] for row in cursor.fetchall()]

        
        stats = {
            'user_id': user_id,
            'level': user[13],
            'exp': user[14],
            'gold': user[16],
            'total_battles': battle_stats[0],
            'wins': battle_stats[1],
            'losses': battle_stats[2],
            'achievements': achievements,
            'active_effects': get_active_effects(user_id)
        }
        
    except sqlite3.Error as e:
        print(f"Error getting user stats: {str(e)}")
    
    return stats



ACHIEVEMENTS = {
    'first_blood': {
        'title': "–ü–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å",
        'condition': lambda stats: stats['kills'] >= 1
    },
    'veteran': {
        'title': "–í–µ—Ç–µ—Ä–∞–Ω",
        'condition': lambda stats: stats['level'] >= 10
    }
}

def check_achievements(user_id):
    stats = get_user_stats(user_id)
    unlocked = []
    
    for ach_id, ach in ACHIEVEMENTS.items():
        if ach['condition'](stats) and not ach_id in stats['achievements']:
            unlocked.append(ach['title'])
    
    return unlocked

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
