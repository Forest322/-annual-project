from telebot import TeleBot
from telebot import types
import sqlite3

bot = TeleBot("7505424553:AAH-gnl9ZaxiISnOE2OukqAKePcWWy4GZL8")
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    name TEXT,
    race TEXT,
    class TEXT,
    strength INTEGER DEFAULT 5,
    agility INTEGER DEFAULT 5,
    intellect INTEGER DEFAULT 5,
    stamina INTEGER DEFAULT 5,
    luck INTEGER DEFAULT 5,
    abilities TEXT DEFAULT '',
    level INTEGER DEFAULT 1,
    exp INTEGER DEFAULT 0,
    exp_to_next_level INTEGER DEFAULT 500
)
"""
)
conn.commit()

state = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
def get_exp_to_next_level(current_level):
    if current_level < 10:
        return 500
    elif current_level < 15:
        return 1000
    elif current_level < 30:
        return 5000
    else:
        return 10000

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
def progress_bar(current, total, length=10):
    percent = min(current / total, 1.0)
    filled = int(percent * length)
    return "üü©" * filled + "‚¨ú" * (length - filled)

@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if user:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if len(user) <= 12:  # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ä–∞—è (–±–µ–∑ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            cursor.execute(
                """
                UPDATE users SET 
                strength = 5,
                agility = 5,
                intellect = 5,
                stamina = 5,
                luck = 5,
                abilities = '',
                level = 1,
                exp = 0,
                exp_to_next_level = 500
                WHERE user_id = ?
                """,
                (user_id,)
            )
            conn.commit()
            
            # –°–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
            cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
            user = cursor.fetchone()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        welcome_message = (
            f"‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user[4]}!</b> ‚ú®\n\n"
            f"üèÜ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {user[13]} ({user[14]}/{user[15]})\n\n"
            f"üß¨ <b>–†–∞—Å–∞:</b> {user[5]}\n"
            f"üéØ <b>–ö–ª–∞—Å—Å:</b> {user[6]}\n\n"
            f"<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n"
            f"üí™ –°–∏–ª–∞: {user[7]}\n"
            f"üèπ –õ–æ–≤–∫–æ—Å—Ç—å: {user[8]}\n"
            f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {user[9]}\n"
            f"üõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user[10]}\n"
            f"üçÄ –£–¥–∞—á–∞: {user[11]}\n\n"
            f"‚ú® <b>–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:</b> {user[12]}"
        )
        bot.send_message(message.chat.id, welcome_message, parse_mode="HTML")
    else:
        state[user_id] = {
            "name": None, 
            "race": None, 
            "class": None,
            "strength": 5,
            "agility": 5,
            "intellect": 5,
            "stamina": 5,
            "luck": 5,
            "abilities": [],
            "level": 1,
            "exp": 0,
            "exp_to_next_level": 500
        }
        msg = bot.send_message(
            message.chat.id,
            "üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!</b> üéÆ\n\n"
            "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
            parse_mode="HTML"
        )
        bot.register_next_step_handler(msg, process_name_step)

def process_name_step(message: types.Message):
    name = message.text
    state[message.from_user.id]["name"] = name

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ß–µ–ª–æ–≤–µ–∫", callback_data="race:–ß–µ–ª–æ–≤–µ–∫"))
    markup.add(types.InlineKeyboardButton("–≠–ª—å—Ñ", callback_data="race:–≠–ª—å—Ñ"))
    markup.add(types.InlineKeyboardButton("–û—Ä–∫", callback_data="race:–û—Ä–∫"))
    markup.add(types.InlineKeyboardButton("–ì–Ω–æ–º", callback_data="race:–ì–Ω–æ–º"))

    msg = bot.send_message(
        message.chat.id, 
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É:\n"
        "1. –ß–µ–ª–æ–≤–µ–∫ (+1 –∫–æ –≤—Å–µ–º —Å—Ç–∞—Ç–∞–º)\n"
        "2. –≠–ª—å—Ñ (+2 –ª–æ–≤–∫–æ—Å—Ç—å, +1 –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç)\n"
        "3. –û—Ä–∫ (+2 —Å–∏–ª–∞, +1 –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å)\n"
        "4. –ì–Ω–æ–º (+2 –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, +1 —É–¥–∞—á–∞)", 
        reply_markup=markup
    )


@bot.callback_query_handler(lambda call: "race" in call.data)
def process_race_step(call: types.CallbackQuery):
    _, race = call.data.split(":")
    state[call.from_user.id]["race"] = race
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã —Ä–∞—Å—ã
    user_stats = state[call.from_user.id]
    if race == "–ß–µ–ª–æ–≤–µ–∫":
        user_stats["strength"] += 1
        user_stats["agility"] += 1
        user_stats["intellect"] += 1
        user_stats["stamina"] += 1
        user_stats["luck"] += 1
    elif race == "–≠–ª—å—Ñ":
        user_stats["agility"] += 2
        user_stats["intellect"] += 1
    elif race == "–û—Ä–∫":
        user_stats["strength"] += 2
        user_stats["stamina"] += 1
    elif race == "–ì–Ω–æ–º":
        user_stats["intellect"] += 2
        user_stats["luck"] += 1

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í–æ–∏–Ω", callback_data="class:–í–æ–∏–Ω"))
    markup.add(types.InlineKeyboardButton("–õ—É—á–Ω–∏–∫", callback_data="class:–õ—É—á–Ω–∏–∫"))
    markup.add(types.InlineKeyboardButton("–ú–∞–≥", callback_data="class:–ú–∞–≥"))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
    markup.add(types.InlineKeyboardButton("–í–æ—Ä", callback_data="class:–í–æ—Ä"))

    bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:\n"
        "1. –í–æ–∏–Ω (–°–∏–ª–∞ +2, –£–¥–∞—Ä —â–∏—Ç–æ–º)\n"
        "2. –õ—É—á–Ω–∏–∫ (–õ–æ–≤–∫–æ—Å—Ç—å +2, –ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª)\n"
        "3. –ú–∞–≥ (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +3, –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä)\n"
        "4. –í–æ—Ä (–£–¥–∞—á–∞ +2, –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä)",
        reply_markup=markup
    )


@bot.callback_query_handler(lambda call: "class" in call.data)
def process_class_step(call: types.CallbackQuery):
    _, class_ = call.data.split(":")
    state[call.from_user.id]["class"] = class_
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –∫–ª–∞—Å—Å–∞
    user_stats = state[call.from_user.id]
    abilities = []
    
    if class_ == "–í–æ–∏–Ω":
        user_stats["strength"] += 2
        abilities.append("–£–¥–∞—Ä —â–∏—Ç–æ–º")
    elif class_ == "–õ—É—á–Ω–∏–∫":
        user_stats["agility"] += 2
        abilities.append("–ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª")
    elif class_ == "–ú–∞–≥":
        user_stats["intellect"] += 3
        abilities.append("–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä")
    elif class_ == "–í–æ—Ä":
        user_stats["luck"] += 2
        abilities.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä")
    
    state[call.from_user.id]["abilities"] = ", ".join(abilities)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "INSERT INTO users (user_id, username, name, race, class, strength, agility, intellect, stamina, luck, abilities) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        (
            call.from_user.id,
            call.from_user.username,
            state[call.from_user.id]["name"],
            state[call.from_user.id]["race"],
            state[call.from_user.id]["class"],
            state[call.from_user.id]["strength"],
            state[call.from_user.id]["agility"],
            state[call.from_user.id]["intellect"],
            state[call.from_user.id]["stamina"],
            state[call.from_user.id]["luck"],
            state[call.from_user.id]["abilities"],
        ),
    )
    conn.commit()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    stats = state[call.from_user.id]
    message_text = (
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–ò–º—è: {stats['name']}\n"
        f"–†–∞—Å–∞: {stats['race']}\n"
        f"–ö–ª–∞—Å—Å: {class_}\n\n"
        f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        f"–°–∏–ª–∞: {stats['strength']}\n"
        f"–õ–æ–≤–∫–æ—Å—Ç—å: {stats['agility']}\n"
        f"–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {stats['intellect']}\n"
        f"–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {stats['stamina']}\n"
        f"–£–¥–∞—á–∞: {stats['luck']}\n\n"
        f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {', '.join(abilities)}"
    )

    bot.send_message(call.message.chat.id, message_text)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)