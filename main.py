from telebot import TeleBot, types
import sqlite3
import random

bot = TeleBot("7505424553:AAH-gnl9ZaxiISnOE2OukqAKePcWWy4GZL8")
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    name TEXT,
    race TEXT,
    class TEXT,
    strength INTEGER DEFAULT 5,
    agility INTEGER DEFAULT 5,
    intellect INTEGER DEFAULT 5,
    stamina INTEGER DEFAULT 5,
    luck INTEGER DEFAULT 5,
    abilities TEXT DEFAULT '',
    level INTEGER DEFAULT 1,
    exp INTEGER DEFAULT 0,
    exp_to_next_level INTEGER DEFAULT 500,
    gold INTEGER DEFAULT 100
)""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS inventory (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    item_name TEXT,
    item_type TEXT,
    effect TEXT,
    quantity INTEGER DEFAULT 1,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)""")
conn.commit()

state = {}
BATTLE_STATES = {}

def get_exp_to_next_level(current_level):
    if current_level < 10:
        return 500
    elif current_level < 15:
        return 1000
    elif current_level < 30:
        return 5000
    return 10000

def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone()

def get_user_inventory(user_id):
    cursor.execute("SELECT * FROM inventory WHERE user_id = ?", (user_id,))
    return cursor.fetchall()

def progress_bar(current, total, length=10):
    percent = min(current / total, 1.0)
    return "üü©" * int(percent * length) + "‚¨ú" * (length - int(percent * length))

@bot.message_handler(commands=["start"])
def start(message: types.Message):
    user = get_user(message.from_user.id)
    
    if user:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="–ú–∞–≥–∞–∑–∏–Ω"),
                   types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"),
                   types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–∞—è", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
        
        welcome_msg = (f"‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user[4]}!</b> ‚ú®\n\n"
                      f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user[13]} ({user[14]}/{user[15]})\n"
                      f"üí∞ –ó–æ–ª–æ—Ç–æ: {user[16]}\n\n"
                      f"üß¨ –†–∞—Å–∞: {user[5]}\nüéØ –ö–ª–∞—Å—Å: {user[6]}\n\n"
                      f"üí™ –°–∏–ª–∞: {user[7]}\nüèπ –õ–æ–≤–∫–æ—Å—Ç—å: {user[8]}\n"
                      f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {user[9]}\nüõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user[10]}\n"
                      f"üçÄ –£–¥–∞—á–∞: {user[11]}\n\n‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {user[12]}")
        bot.send_message(message.chat.id, welcome_msg, parse_mode="HTML", reply_markup=markup)
    else:
        state[message.from_user.id] = {
            "name": None, "race": None, "class": None,
            "strength": 5, "agility": 5, "intellect": 5,
            "stamina": 5, "luck": 5, "abilities": [],
            "level": 1, "exp": 0, "exp_to_next_level": 500, "gold": 100
        }
        bot.send_message(message.chat.id, "üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", parse_mode="HTML")
        bot.register_next_step_handler(message, process_name_step)

def process_name_step(message: types.Message):
    state[message.from_user.id]["name"] = message.text
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ß–µ–ª–æ–≤–µ–∫", callback_data="race:–ß–µ–ª–æ–≤–µ–∫"),
               types.InlineKeyboardButton("–≠–ª—å—Ñ", callback_data="race:–≠–ª—å—Ñ"),
               types.InlineKeyboardButton("–û—Ä–∫", callback_data="race:–û—Ä–∫"),
               types.InlineKeyboardButton("–ì–Ω–æ–º", callback_data="race:–ì–Ω–æ–º"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É:", reply_markup=markup)

@bot.callback_query_handler(lambda call: call.data.startswith("race:"))
def process_race(call: types.CallbackQuery):
    race = call.data.split(":")[1]
    state[call.from_user.id]["race"] = race
    stats = state[call.from_user.id]
    
    race_bonuses = {
        "–ß–µ–ª–æ–≤–µ–∫": "–í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ +1",
        "–≠–ª—å—Ñ": "–õ–æ–≤–∫–æ—Å—Ç—å +2, –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +1",
        "–û—Ä–∫": "–°–∏–ª–∞ +2, –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å +1",
        "–ì–Ω–æ–º": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +2, –£–¥–∞—á–∞ +1"
    }
    
    bot.edit_message_text(
        f"üß¨ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—É: <b>{race}</b>\n"
        f"‚ú® –ë–æ–Ω—É—Å—ã: {race_bonuses[race]}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
        call.message.chat.id, 
        call.message.message_id,
        parse_mode="HTML"
    )
    
    markup = types.InlineKeyboardMarkup()
    classes = [
        ("–í–æ–∏–Ω", "üí™ –°–∏–ª–∞ +2, –£–¥–∞—Ä —â–∏—Ç–æ–º"),
        ("–õ—É—á–Ω–∏–∫", "üèπ –õ–æ–≤–∫–æ—Å—Ç—å +2, –ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª"),
        ("–ú–∞–≥", "üîÆ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +3, –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä"),
        ("–í–æ—Ä", "üé≤ –£–¥–∞—á–∞ +2, –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä")
    ]
    for class_name, bonus in classes:
        markup.add(types.InlineKeyboardButton(
            f"{class_name} - {bonus}", 
            callback_data=f"class:{class_name}"
        ))
        
    bot.send_message(call.message.chat.id, 
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:</b>\n\n"
        "1. –í–æ–∏–Ω - –°–∏–ª–∞ +2, –£–¥–∞—Ä —â–∏—Ç–æ–º\n"
        "2. –õ—É—á–Ω–∏–∫ - –õ–æ–≤–∫–æ—Å—Ç—å +2, –ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª\n"
        "3. –ú–∞–≥ - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç +3, –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä\n"
        "4. –í–æ—Ä - –£–¥–∞—á–∞ +2, –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(lambda call: call.data.startswith("class:"))
def process_class(call: types.CallbackQuery):
    class_ = call.data.split(":")[1]
    state[call.from_user.id]["class"] = class_
    stats = state[call.from_user.id]
    
    class_bonuses = {
        "–í–æ–∏–Ω": {"strength": 2, "abilities": ["üõ° –£–¥–∞—Ä —â–∏—Ç–æ–º"]},
        "–õ—É—á–Ω–∏–∫": {"agility": 2, "abilities": ["üéØ –ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª"]},
        "–ú–∞–≥": {"intellect": 3, "abilities": ["üî• –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä"]},
        "–í–æ—Ä": {"luck": 2, "abilities": ["üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä"]}
    }
    
    bonuses = class_bonuses[class_]
    for stat, value in bonuses.items():
        if stat in stats:
            stats[stat] += value
        else:
            stats["abilities"] = value
    
    final_stats = (
        f"üß¨ –†–∞—Å–∞: {stats['race']}\n"
        f"üéØ –ö–ª–∞—Å—Å: {class_}\n\n"
        f"üí™ –°–∏–ª–∞: {stats['strength']}\n"
        f"üèπ –õ–æ–≤–∫–æ—Å—Ç—å: {stats['agility']}\n"
        f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {stats['intellect']}\n"
        f"üõ° –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {stats['stamina']}\n"
        f"üçÄ –£–¥–∞—á–∞: {stats['luck']}\n\n"
        f"‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {', '.join(stats['abilities'])}"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"))
    
    bot.edit_message_text(
        f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ –≥–æ—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n{final_stats}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode="HTML"
    )
    
    user_data = state[call.from_user.id]
    cursor.execute("""INSERT INTO users 
        (user_id, username, first_name, last_name, name, race, class, strength, agility, intellect, stamina, luck, abilities, gold) 
        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)""", 
        (
            call.from_user.id,
            call.from_user.username,
            call.from_user.first_name,
            call.from_user.last_name,
            user_data["name"],
            user_data["race"],
            class_,
            user_data["strength"],
            user_data["agility"],
            user_data["intellect"],
            user_data["stamina"],
            user_data["luck"],
            ", ".join(user_data["abilities"]),
            user_data["gold"]
        ))
    conn.commit()
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="–ú–∞–≥–∞–∑–∏–Ω"),
               types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"),
               types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–∞—è", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
    
    profile_msg = (f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!\n\nüìù –ò–º—è: {user_data['name']}\n"
                  f"üß¨ –†–∞—Å–∞: {user_data['race']}\nüéØ –ö–ª–∞—Å—Å: {class_}\n\n"
                  f"üí™ –°–∏–ª–∞: {user_data['strength']}\nüèπ –õ–æ–≤–∫–æ—Å—Ç—å: {user_data['agility']}\n"
                  f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {user_data['intellect']}\nüõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user_data['stamina']}\n"
                  f"üçÄ –£–¥–∞—á–∞: {user_data['luck']}\n\n‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {', '.join(user_data['abilities'])}")
    bot.edit_message_text(profile_msg, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call: types.CallbackQuery):
    user = get_user(call.from_user.id)
    if not user:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return

    if call.data == "–ì–ª–∞–≤–Ω–∞—è":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"),
                   types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="–ú–∞–≥–∞–∑–∏–Ω"),
                   types.InlineKeyboardButton("–ë–æ–π", callback_data="start_battle"))
        bot.edit_message_text(f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ü—Ä–∏–≤–µ—Ç, {user[4]}!", call.message.chat.id, call.message.message_id, reply_markup=markup)
    
    elif call.data == "–ü—Ä–æ—Ñ–∏–ª—å":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
                   types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
        
        profile_msg = (f"üìä –ü—Ä–æ—Ñ–∏–ª—å {user[4]}\n\n"
                      f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user[13]}\n"
                      f"üìà –û–ø—ã—Ç: {user[14]}/{user[15]}\n"
                      f"üí∞ –ó–æ–ª–æ—Ç–æ: {user[16]}\n\n"
                      f"üí™ –°–∏–ª–∞: {user[7]}\nüèπ –õ–æ–≤–∫–æ—Å—Ç—å: {user[8]}\n"
                      f"üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {user[9]}\nüõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {user[10]}\n"
                      f"üçÄ –£–¥–∞—á–∞: {user[11]}\n\n"
                      f"{progress_bar(user[14], user[15])}")
        bot.edit_message_text(profile_msg, call.message.chat.id, call.message.message_id, reply_markup=markup)
    
    elif call.data == "–ú–∞–≥–∞–∑–∏–Ω":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ó–µ–ª—å–µ —Å–∏–ª—ã (50g)", callback_data="buy:strength_potion"),
                   types.InlineKeyboardButton("–ó–µ–ª—å–µ –ª–æ–≤–∫–æ—Å—Ç–∏ (50g)", callback_data="buy:agility_potion"),
                   types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
        bot.edit_message_text(f"üõí –ú–∞–≥–∞–∑–∏–Ω\nüí∞ –ó–æ–ª–æ—Ç–æ: {user[16]}", call.message.chat.id, call.message.message_id, reply_markup=markup)
    
    elif call.data.startswith("buy:"):
        item_type = call.data.split(":")[1]
        if user[16] < 50:
            bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")
            return
        
        item_name = "–ó–µ–ª—å–µ —Å–∏–ª—ã" if item_type == "strength_potion" else "–ó–µ–ª—å–µ –ª–æ–≤–∫–æ—Å—Ç–∏"
        effect = "+1 –∫ —Å–∏–ª–µ" if item_type == "strength_potion" else "+1 –∫ –ª–æ–≤–∫–æ—Å—Ç–∏"
        
        cursor.execute("UPDATE users SET gold = gold - 50 WHERE user_id = ?", (call.from_user.id,))
        cursor.execute("SELECT * FROM inventory WHERE user_id = ? AND item_name = ?", (call.from_user.id, item_name))
        if existing := cursor.fetchone():
            cursor.execute("UPDATE inventory SET quantity = quantity + 1 WHERE id = ?", (existing[0],))
        else:
            cursor.execute("INSERT INTO inventory (user_id, item_name, item_type, effect) VALUES (?,?,?,?)",
                         (call.from_user.id, item_name, item_type, effect))
        conn.commit()
        
        bot.answer_callback_query(call.id, f"–ö—É–ø–ª–µ–Ω–æ {item_name}!")
        handle_callbacks(call)
    
    elif call.data == "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
        inventory = get_user_inventory(call.from_user.id)
        markup = types.InlineKeyboardMarkup()
        for item in inventory:
            markup.add(types.InlineKeyboardButton(f"{item[2]} x{item[5]}", callback_data=f"item_{item[0]}"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ü—Ä–æ—Ñ–∏–ª—å"))
        bot.edit_message_text("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", call.message.chat.id, call.message.message_id, reply_markup=markup)
    
    elif call.data == "start_battle":
        enemy = random.choice([{"name": "–ì–æ–±–ª–∏–Ω", "hp": 50, "attack": 8}, 
                             {"name": "–¢—Ä–æ–ª–ª—å", "hp": 100, "attack": 15}])
        BATTLE_STATES[call.from_user.id] = {
            "enemy": enemy,
            "user_hp": user[10] * 10,
            "enemy_hp": enemy["hp"],
            "temp_buffs": {}
        }
        show_battle_interface(call.message, call.from_user.id)

def show_battle_interface(message, user_id):
    battle = BATTLE_STATES[user_id]
    enemy = battle["enemy"]
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="battle_attack"),
               types.InlineKeyboardButton("–°–±–µ–∂–∞—Ç—å", callback_data="battle_flee"))
    
    for item in get_user_inventory(user_id):
        if "–ó–µ–ª—å–µ" in item[2]:
            markup.add(types.InlineKeyboardButton(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {item[2]}", callback_data=f"use_{item[0]}"))
    
    msg_text = (f"‚öîÔ∏è –ë–æ–π —Å {enemy['name']}!\n"
               f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {battle['user_hp']}\n"
               f"üíÄ –ó–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞: {battle['enemy_hp']}")
    bot.edit_message_text(msg_text, message.chat.id, message.message_id, reply_markup=markup)

@bot.callback_query_handler(lambda call: call.data.startswith("use_"))
def use_item(call: types.CallbackQuery):
    item_id = int(call.data.split("_")[1])
    user_id = call.from_user.id
    inventory = get_user_inventory(user_id)
    item = next((i for i in inventory if i[0] == item_id), None)
    
    if not item:
        bot.answer_callback_query(call.id, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if "–ó–µ–ª—å–µ —Å–∏–ª—ã" in item[2]:
        BATTLE_STATES[user_id]["temp_buffs"]["strength"] = BATTLE_STATES[user_id].get("temp_buffs", {}).get("strength", 0) + 1
    elif "–ó–µ–ª—å–µ –ª–æ–≤–∫–æ—Å—Ç–∏" in item[2]:
        BATTLE_STATES[user_id]["temp_buffs"]["agility"] = BATTLE_STATES[user_id].get("temp_buffs", {}).get("agility", 0) + 1
    
    if item[5] > 1:
        cursor.execute("UPDATE inventory SET quantity = quantity - 1 WHERE id = ?", (item_id,))
    else:
        cursor.execute("DELETE FROM inventory WHERE id = ?", (item_id,))
    conn.commit()
    
    bot.answer_callback_query(call.id, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {item[2]}!")
    show_battle_interface(call.message, user_id)



if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)